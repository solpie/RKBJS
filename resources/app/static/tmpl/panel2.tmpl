<html>
<body>
<div id="app">
    <router-view></router-view>
</div>
<!--<script>-->
<!--var wsPort = {-->
<!--{.-->
<!--wsPort-->
<!--}-->
<!--}-->
<!--</script>-->
<!--<script src="/static/js/vue/vue.min.js"></script>-->
<!--<script src="/static/js/vue/vue-resource.min.js"></script>-->
<!--<script src="/static/js/vue/vue-router.min.js"></script>-->
<script>
    var panelName = {{.panelName}}
</script>
<script>/*!
 * Vue.js v2.0.1
 * (c) 2014-2016 Evan You
 * Released under the MIT License.
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Vue=t()}(this,function(){"use strict";function e(e){return null==e?"":"object"==typeof e?JSON.stringify(e,null,2):String(e)}function t(e){var t=parseFloat(e,10);return t||0===t?t:e}function n(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}function r(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}function i(e,t){return hr.call(e,t)}function o(e){return"string"==typeof e||"number"==typeof e}function a(e){var t=Object.create(null);return function(n){var r=t[n];return r||(t[n]=e(n))}}function s(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function c(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function u(e,t){for(var n in t)e[n]=t[n];return e}function l(e){return null!==e&&"object"==typeof e}function f(e){return $r.call(e)===wr}function d(e){for(var t={},n=0;n<e.length;n++)e[n]&&u(t,e[n]);return t}function p(){}function v(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function h(e,t){return e==t||!(!l(e)||!l(t))&&JSON.stringify(e)===JSON.stringify(t)}function m(e,t){for(var n=0;n<e.length;n++)if(h(e[n],t))return n;return-1}function g(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function y(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function _(e){if(!kr.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}function b(e){return/native code/.test(e.toString())}function $(e){Rr.target&&Ir.push(Rr.target),Rr.target=e}function w(){Rr.target=Ir.pop()}function C(){Fr.length=0,Br={},Hr=Ur=!1}function x(){for(Ur=!0,Fr.sort(function(e,t){return e.id-t.id}),zr=0;zr<Fr.length;zr++){var e=Fr[zr],t=e.id;Br[t]=null,e.run()}Nr&&xr.devtools&&Nr.emit("flush"),C()}function k(e){var t=e.id;if(null==Br[t]){if(Br[t]=!0,Ur){for(var n=Fr.length-1;n>=0&&Fr[n].id>e.id;)n--;Fr.splice(Math.max(n,zr)+1,0,e)}else Fr.push(e);Hr||(Hr=!0,Mr(x))}}function A(e,t){var n,r;t||(t=qr,t.clear());var i=Array.isArray(e),o=l(e);if((i||o)&&Object.isExtensible(e)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(n=e.length;n--;)A(e[n],t);else if(o)for(r=Object.keys(e),n=r.length;n--;)A(e[r[n]],t)}}function O(e,t){e.__proto__=t}function T(e,t,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];y(e,o,t[o])}}function S(e){if(l(e)){var t;return i(e,"__ob__")&&e.__ob__ instanceof Yr?t=e.__ob__:Gr.shouldConvert&&!xr._isServer&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(t=new Yr(e)),t}}function E(e,t,n,r){var i=new Rr,o=Object.getOwnPropertyDescriptor(e,t);if(!o||o.configurable!==!1){var a=o&&o.get,s=o&&o.set,c=S(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=a?a.call(e):n;if(Rr.target&&(i.depend(),c&&c.dep.depend(),Array.isArray(t)))for(var r=void 0,o=0,s=t.length;o<s;o++)r=t[o],r&&r.__ob__&&r.__ob__.dep.depend();return t},set:function(t){var r=a?a.call(e):n;t!==r&&(s?s.call(e,t):n=t,c=S(t),i.notify())}})}}function j(e,t,n){if(Array.isArray(e))return e.splice(t,1,n),n;if(i(e,t))return void(e[t]=n);var r=e.__ob__;if(!(e._isVue||r&&r.vmCount))return r?(E(r.value,t,n),r.dep.notify(),n):void(e[t]=n)}function L(e,t){var n=e.__ob__;e._isVue||n&&n.vmCount||i(e,t)&&(delete e[t],n&&n.dep.notify())}function D(e){e._watchers=[],N(e),M(e),P(e),I(e),F(e)}function N(e){var t=e.$options.props;if(t){var n=e.$options.propsData||{},r=e.$options._propKeys=Object.keys(t),i=!e.$parent;Gr.shouldConvert=i;for(var o=function(i){var o=r[i];E(e,o,je(o,t,n,e))},a=0;a<r.length;a++)o(a);Gr.shouldConvert=!0}}function M(e){var t=e.$options.data;t=e._data="function"==typeof t?t.call(e):t||{},f(t)||(t={});for(var n=Object.keys(t),r=e.$options.props,o=n.length;o--;)r&&i(r,n[o])||U(e,n[o]);S(t),t.__ob__&&t.__ob__.vmCount++}function P(e){var t=e.$options.computed;if(t)for(var n in t){var r=t[n];"function"==typeof r?(Qr.get=R(r,e),Qr.set=p):(Qr.get=r.get?r.cache!==!1?R(r.get,e):s(r.get,e):p,Qr.set=r.set?s(r.set,e):p),Object.defineProperty(e,n,Qr)}}function R(e,t){var n=new Jr(t,e,p,{lazy:!0});return function(){return n.dirty&&n.evaluate(),Rr.target&&n.depend(),n.value}}function I(e){var t=e.$options.methods;if(t)for(var n in t)null!=t[n]&&(e[n]=s(t[n],e))}function F(e){var t=e.$options.watch;if(t)for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)B(e,n,r[i]);else B(e,n,r)}}function B(e,t,n){var r;f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function H(e){var t={};t.get=function(){return this._data},Object.defineProperty(e.prototype,"$data",t),e.prototype.$set=j,e.prototype.$delete=L,e.prototype.$watch=function(e,t,n){var r=this;n=n||{},n.user=!0;var i=new Jr(r,e,t,n);return n.immediate&&t.call(r,i.value),function(){i.teardown()}}}function U(e,t){g(t)||Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return e._data[t]},set:function(n){e._data[t]=n}})}function z(e){var t=new Xr(e.tag,e.data,e.children,e.text,e.elm,e.ns,e.context,e.componentOptions);return t.isStatic=e.isStatic,t.key=e.key,t.isCloned=!0,t}function V(e){for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=z(e[n]);return t}function J(e,t,n){if(o(e))return[q(e)];if(Array.isArray(e)){for(var r=[],i=0,a=e.length;i<a;i++){var s=e[i],c=r[r.length-1];Array.isArray(s)?r.push.apply(r,J(s,t,i)):o(s)?c&&c.text?c.text+=String(s):""!==s&&r.push(q(s)):s instanceof Xr&&(s.text&&c&&c.text?c.text+=s.text:(t&&K(s,t),s.tag&&null==s.key&&null!=n&&(s.key="__vlist_"+n+"_"+i+"__"),r.push(s)))}return r}}function q(e){return new Xr(void 0,void 0,void 0,String(e))}function K(e,t){if(e.tag&&!e.ns&&(e.ns=t,e.children))for(var n=0,r=e.children.length;n<r;n++)K(e.children[n],t)}function W(e){return e&&e.filter(function(e){return e&&e.componentOptions})[0]}function Z(e,t,n){var r=e[t];if(r){var i=e.__injected||(e.__injected={});i[t]||(i[t]=!0,e[t]=function(){r.apply(this,arguments),n.apply(this,arguments)})}else e[t]=n}function G(e,t,n,r){var i,o,a,s,c,u;for(i in e)if(o=e[i],a=t[i],o)if(a){if(o!==a)if(Array.isArray(a)){a.length=o.length;for(var l=0;l<a.length;l++)a[l]=o[l];e[i]=a}else a.fn=o,e[i]=a}else u="!"===i.charAt(0),c=u?i.slice(1):i,Array.isArray(o)?n(c,o.invoker=Y(o),u):(o.invoker||(s=o,o=e[i]={},o.fn=s,o.invoker=Q(o)),n(c,o.invoker,u));else;for(i in t)e[i]||(c="!"===i.charAt(0)?i.slice(1):i,r(c,t[i].invoker))}function Y(e){return function(t){for(var n=arguments,r=1===arguments.length,i=0;i<e.length;i++)r?e[i](t):e[i].apply(null,n)}}function Q(e){return function(t){var n=1===arguments.length;n?e.fn(t):e.fn.apply(null,arguments)}}function X(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function ee(e){e.prototype._mount=function(e,t){var n=this;return n.$el=e,n.$options.render||(n.$options.render=ei),te(n,"beforeMount"),n._watcher=new Jr(n,function(){n._update(n._render(),t)},p),t=!1,n.$root===n&&(n._isMounted=!0,te(n,"mounted")),n},e.prototype._update=function(e,t){var n=this;n._isMounted&&te(n,"beforeUpdate");var r=n.$el,i=ti;ti=n;var o=n._vnode;n._vnode=e,o?n.$el=n.__patch__(o,e):n.$el=n.__patch__(n.$el,e,t),ti=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el),n._isMounted&&te(n,"updated")},e.prototype._updateFromParent=function(e,t,n,r){var i=this,o=!(!i.$options._renderChildren&&!r);if(i.$options._parentVnode=n,i.$options._renderChildren=r,e&&i.$options.props){Gr.shouldConvert=!1;for(var a=i.$options._propKeys||[],s=0;s<a.length;s++){var c=a[s];i[c]=je(c,i.$options.props,e,i)}Gr.shouldConvert=!0}if(t){var u=i.$options._parentListeners;i.$options._parentListeners=t,i._updateListeners(t,u)}o&&(i.$slots=ye(r,i._renderContext),i.$forceUpdate())},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){te(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||r(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,te(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null)}}}function te(e,t){var n=e.$options[t];if(n)for(var r=0,i=n.length;r<i;r++)n[r].call(e);e.$emit("hook:"+t)}function ne(e,t,n,r,i){if(e&&(l(e)&&(e=we.extend(e)),"function"==typeof e)){if(!e.cid)if(e.resolved)e=e.resolved;else if(e=ue(e,function(){n.$forceUpdate()}),!e)return;t=t||{};var o=le(t,e);if(e.options.functional)return re(e,o,t,n,r);var a=t.on;t.on=t.nativeOn,e.options.abstract&&(t={}),de(t);var s=e.options.name||i,c=new Xr("vue-component-"+e.cid+(s?"-"+s:""),t,void 0,void 0,void 0,void 0,n,{Ctor:e,propsData:o,listeners:a,tag:i,children:r});return c}}function re(e,t,n,r,i){var o={},a=e.options.props;if(a)for(var c in a)o[c]=je(c,a,t);return e.options.render.call(null,s(ve,{_self:Object.create(r)}),{props:o,data:n,parent:r,children:J(i),slots:function(){return ye(i,r)}})}function ie(e,t){var n=e.componentOptions,r={_isComponent:!0,parent:t,propsData:n.propsData,_componentTag:n.tag,_parentVnode:e,_parentListeners:n.listeners,_renderChildren:n.children},i=e.data.inlineTemplate;return i&&(r.render=i.render,r.staticRenderFns=i.staticRenderFns),new n.Ctor(r)}function oe(e,t){if(!e.child||e.child._isDestroyed){var n=e.child=ie(e,ti);n.$mount(t?e.elm:void 0,t)}}function ae(e,t){var n=t.componentOptions,r=t.child=e.child;r._updateFromParent(n.propsData,n.listeners,t,n.children)}function se(e){e.child._isMounted||(e.child._isMounted=!0,te(e.child,"mounted")),e.data.keepAlive&&(e.child._inactive=!1,te(e.child,"activated"))}function ce(e){e.child._isDestroyed||(e.data.keepAlive?(e.child._inactive=!0,te(e.child,"deactivated")):e.child.$destroy())}function ue(e,t){if(!e.requested){e.requested=!0;var n=e.pendingCallbacks=[t],r=!0,i=function(t){if(l(t)&&(t=we.extend(t)),e.resolved=t,!r)for(var i=0,o=n.length;i<o;i++)n[i](t)},o=function(e){},a=e(i,o);return a&&"function"==typeof a.then&&!e.resolved&&a.then(i,o),r=!1,e.resolved}e.pendingCallbacks.push(t)}function le(e,t){var n=t.options.props;if(n){var r={},i=e.attrs,o=e.props,a=e.domProps;if(i||o||a)for(var s in n){var c=br(s);fe(r,o,s,c,!0)||fe(r,i,s,c)||fe(r,a,s,c)}return r}}function fe(e,t,n,r,o){if(t){if(i(t,n))return e[n]=t[n],o||delete t[n],!0;if(i(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function de(e){e.hook||(e.hook={});for(var t=0;t<ri.length;t++){var n=ri[t],r=e.hook[n],i=ni[n];e.hook[n]=r?pe(i,r):i}}function pe(e,t){return function(n,r){e(n,r),t(n,r)}}function ve(e,t,n){return t&&(Array.isArray(t)||"object"!=typeof t)&&(n=t,t=void 0),he(this._self,e,t,n)}function he(e,t,n,r){if(!n||!n.__ob__){if(!t)return ei();if("string"==typeof t){var i,o=xr.getTagNamespace(t);return xr.isReservedTag(t)?new Xr(t,n,J(r,o),void 0,void 0,o,e):(i=Ee(e.$options,"components",t))?ne(i,n,e,r,t):new Xr(t,n,J(r,o),void 0,void 0,o,e)}return ne(t,n,e,r)}}function me(e){e.$vnode=null,e._vnode=null,e._staticTrees=null,e._renderContext=e.$options._parentVnode&&e.$options._parentVnode.context,e.$slots=ye(e.$options._renderChildren,e._renderContext),e.$createElement=s(ve,e),e.$options.el&&e.$mount(e.$options.el)}function ge(n){n.prototype.$nextTick=function(e){Mr(e,this)},n.prototype._render=function(){var e=this,t=e.$options,n=t.render,r=t.staticRenderFns,i=t._parentVnode;if(e._isMounted)for(var o in e.$slots)e.$slots[o]=V(e.$slots[o]);r&&!e._staticTrees&&(e._staticTrees=[]),e.$vnode=i;var a;try{a=n.call(e._renderProxy,e.$createElement)}catch(t){if(xr.errorHandler)xr.errorHandler.call(null,t,e);else{if(xr._isServer)throw t;setTimeout(function(){throw t},0)}a=e._vnode}return a instanceof Xr||(a=ei()),a.parent=i,a},n.prototype._h=ve,n.prototype._s=e,n.prototype._n=t,n.prototype._e=ei,n.prototype._q=h,n.prototype._i=m,n.prototype._m=function(e,t){var n=this._staticTrees[e];if(n&&!t)return Array.isArray(n)?V(n):z(n);if(n=this._staticTrees[e]=this.$options.staticRenderFns[e].call(this._renderProxy),Array.isArray(n))for(var r=0;r<n.length;r++)n[r].isStatic=!0,n[r].key="__static__"+e+"_"+r;else n.isStatic=!0,n.key="__static__"+e;return n};var r=function(e){return e};n.prototype._f=function(e){return Ee(this.$options,"filters",e,!0)||r},n.prototype._l=function(e,t){var n,r,i,o,a;if(Array.isArray(e))for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(l(e))for(o=Object.keys(e),n=new Array(o.length),r=0,i=o.length;r<i;r++)a=o[r],n[r]=t(e[a],a,r);return n},n.prototype._t=function(e,t){var n=this.$slots[e];return n||t},n.prototype._b=function(e,t,n){if(t)if(l(t)){Array.isArray(t)&&(t=d(t));for(var r in t)if("class"===r||"style"===r)e[r]=t[r];else{var i=n||xr.mustUseProp(r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={});i[r]=t[r]}}else;return e},n.prototype._k=function(e){return xr.keyCodes[e]}}function ye(e,t){var n={};if(!e)return n;for(var r,i,o=J(e)||[],a=[],s=0,c=o.length;s<c;s++)if(i=o[s],i.context===t&&i.data&&(r=i.data.slot)){var u=n[r]||(n[r]=[]);"template"===i.tag?u.push.apply(u,i.children):u.push(i)}else a.push(i);return a.length&&(1!==a.length||" "!==a[0].text&&!a[0].isComment)&&(n.default=a),n}function _e(e){e._events=Object.create(null);var t=e.$options._parentListeners,n=s(e.$on,e),r=s(e.$off,e);e._updateListeners=function(e,t){G(e,t||{},n,r)},t&&e._updateListeners(t)}function be(e){e.prototype.$on=function(e,t){var n=this;return(n._events[e]||(n._events[e]=[])).push(t),n},e.prototype.$once=function(e,t){function n(){r.$off(e,n),t.apply(r,arguments)}var r=this;return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;var r=n._events[e];if(!r)return n;if(1===arguments.length)return n._events[e]=null,n;for(var i,o=r.length;o--;)if(i=r[o],i===t||i.fn===t){r.splice(o,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?c(n):n;for(var r=c(arguments,1),i=0,o=n.length;i<o;i++)n[i].apply(t,r)}return t}}function $e(e){function t(e,t){var r=e.$options=Object.create(n(e));r.parent=t.parent,r.propsData=t.propsData,r._parentVnode=t._parentVnode,r._parentListeners=t._parentListeners,r._renderChildren=t._renderChildren,r._componentTag=t._componentTag,t.render&&(r.render=t.render,r.staticRenderFns=t.staticRenderFns)}function n(e){var t=e.constructor,n=t.options;if(t.super){var r=t.super.options,i=t.superOptions;r!==i&&(t.superOptions=r,n=t.options=Se(r,t.extendOptions),n.name&&(n.components[n.name]=t))}return n}e.prototype._init=function(e){var r=this;r._uid=ii++,r._isVue=!0,e&&e._isComponent?t(r,e):r.$options=Se(n(r),e||{},r),r._renderProxy=r,r._self=r,X(r),_e(r),te(r,"beforeCreate"),D(r),te(r,"created"),me(r)}}function we(e){this._init(e)}function Ce(e,t){var n,r,o;for(n in t)r=e[n],o=t[n],i(e,n)?l(r)&&l(o)&&Ce(r,o):j(e,n,o);return e}function xe(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function ke(e,t){var n=Object.create(e||null);return t?u(n,t):n}function Ae(e){if(e.components){var t,n=e.components;for(var r in n){var i=r.toLowerCase();vr(i)||xr.isReservedTag(i)||(t=n[r],f(t)&&(n[r]=we.extend(t)))}}}function Oe(e){var t=e.props;if(t){var n,r,i,o={};if(Array.isArray(t))for(n=t.length;n--;)r=t[n],"string"==typeof r&&(i=gr(r),o[i]={type:null});else if(f(t))for(var a in t)r=t[a],i=gr(a),o[i]=f(r)?r:{type:r};e.props=o}}function Te(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}function Se(e,t,n){function r(r){var i=si[r]||ci;l[r]=i(e[r],t[r],n,r)}Ae(t),Oe(t),Te(t);var o=t.extends;if(o&&(e="function"==typeof o?Se(e,o.options,n):Se(e,o,n)),t.mixins)for(var a=0,s=t.mixins.length;a<s;a++){var c=t.mixins[a];c.prototype instanceof we&&(c=c.options),e=Se(e,c,n)}var u,l={};for(u in e)r(u);for(u in t)i(e,u)||r(u);return l}function Ee(e,t,n,r){if("string"==typeof n){var i=e[t],o=i[n]||i[gr(n)]||i[yr(gr(n))];return o}}function je(e,t,n,r){var o=t[e],a=!i(n,e),s=n[e];if("Boolean"===De(o.type)&&(a&&!i(o,"default")?s=!1:""!==s&&s!==br(e)||(s=!0)),void 0===s){s=Le(r,o,e);var c=Gr.shouldConvert;Gr.shouldConvert=!0,S(s),Gr.shouldConvert=c}return s}function Le(e,t,n){if(i(t,"default")){var r=t.default;return l(r),"function"==typeof r&&t.type!==Function?r.call(e):r}}function De(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t&&t[1]}function Ne(e){e.use=function(e){if(!e.installed){var t=c(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}}}function Me(e){e.mixin=function(t){e.options=Se(e.options,t)}}function Pe(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=0===n.cid;if(r&&e._Ctor)return e._Ctor;var i=e.name||n.options.name,o=function(e){this._init(e)};return o.prototype=Object.create(n.prototype),o.prototype.constructor=o,o.cid=t++,o.options=Se(n.options,e),o.super=n,o.extend=n.extend,xr._assetTypes.forEach(function(e){o[e]=n[e]}),i&&(o.options.components[i]=o),o.superOptions=n.options,o.extendOptions=e,r&&(e._Ctor=o),o}}function Re(e){xr._assetTypes.forEach(function(t){e[t]=function(n,r){return r?("component"===t&&f(r)&&(r.name=r.name||n,r=e.extend(r)),"directive"===t&&"function"==typeof r&&(r={bind:r,update:r}),this.options[t+"s"][n]=r,r):this.options[t+"s"][n]}})}function Ie(e){var t={};t.get=function(){return xr},Object.defineProperty(e,"config",t),e.util=ui,e.set=j,e.delete=L,e.nextTick=Mr,e.options=Object.create(null),xr._assetTypes.forEach(function(t){e.options[t+"s"]=Object.create(null)}),u(e.options.components,fi),Ne(e),Me(e),Pe(e),Re(e)}function Fe(e){for(var t=e.data,n=e,r=e;r.child;)r=r.child._vnode,r.data&&(t=Be(r.data,t));for(;n=n.parent;)n.data&&(t=Be(t,n.data));return He(t)}function Be(e,t){return{staticClass:Ue(e.staticClass,t.staticClass),class:e.class?[e.class,t.class]:t.class}}function He(e){var t=e.class,n=e.staticClass;return n||t?Ue(n,ze(t)):""}function Ue(e,t){return e?t?e+" "+t:e:t||""}function ze(e){var t="";if(!e)return t;if("string"==typeof e)return e;if(Array.isArray(e)){for(var n,r=0,i=e.length;r<i;r++)e[r]&&(n=ze(e[r]))&&(t+=n+" ");return t.slice(0,-1)}if(l(e)){for(var o in e)e[o]&&(t+=o+" ");return t.slice(0,-1)}return t}function Ve(e){return ki(e)?"svg":"math"===e?"math":void 0}function Je(e){if(!Or)return!0;if(Oi(e))return!1;if(e=e.toLowerCase(),null!=Ti[e])return Ti[e];var t=document.createElement(e);return e.indexOf("-")>-1?Ti[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Ti[e]=/HTMLUnknownElement/.test(t.toString())}function qe(e){if("string"==typeof e){if(e=document.querySelector(e),!e)return document.createElement("div")}return e}function Ke(e){return document.createElement(e)}function We(e,t){return document.createElementNS(bi[e],t)}function Ze(e){return document.createTextNode(e)}function Ge(e){return document.createComment(e)}function Ye(e,t,n){e.insertBefore(t,n)}function Qe(e,t){e.removeChild(t)}function Xe(e,t){e.appendChild(t)}function et(e){return e.parentNode}function tt(e){return e.nextSibling}function nt(e){return e.tagName}function rt(e,t){e.textContent=t}function it(e){return e.childNodes}function ot(e,t,n){e.setAttribute(t,n)}function at(e,t){var n=e.data.ref;if(n){var i=e.context,o=e.child||e.elm,a=i.$refs;t?Array.isArray(a[n])?r(a[n],o):a[n]===o&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])?a[n].push(o):a[n]=[o]:a[n]=o}}function st(e){return null==e}function ct(e){return null!=e}function ut(e,t){return e.key===t.key&&e.tag===t.tag&&e.isComment===t.isComment&&!e.data==!t.data}function lt(e,t,n){var r,i,o={};for(r=t;r<=n;++r)i=e[r].key,ct(i)&&(o[i]=r);return o}function ft(e){function t(e){return new Xr(C.tagName(e).toLowerCase(),{},[],void 0,e)}function n(e,t){function n(){0===--n.listeners&&r(e)}return n.listeners=t,n}function r(e){var t=C.parentNode(e);C.removeChild(t,e)}function i(e,t,n){var r,i=e.data;if(e.isRootInsert=!n,ct(i)&&(ct(r=i.hook)&&ct(r=r.init)&&r(e),ct(r=e.child)))return u(e,t),e.elm;var o=e.children,s=e.tag;return ct(s)?(e.elm=e.ns?C.createElementNS(e.ns,s):C.createElement(s),l(e),a(e,o,t),ct(i)&&c(e,t)):e.isComment?e.elm=C.createComment(e.text):e.elm=C.createTextNode(e.text),e.elm}function a(e,t,n){if(Array.isArray(t))for(var r=0;r<t.length;++r)C.appendChild(e.elm,i(t[r],n,!0));else o(e.text)&&C.appendChild(e.elm,C.createTextNode(e.text))}function s(e){for(;e.child;)e=e.child._vnode;return ct(e.tag)}function c(e,t){for(var n=0;n<$.create.length;++n)$.create[n](Li,e);_=e.data.hook,ct(_)&&(_.create&&_.create(Li,e),_.insert&&t.push(e))}function u(e,t){e.data.pendingInsert&&t.push.apply(t,e.data.pendingInsert),e.elm=e.child.$el,s(e)?(c(e,t),l(e)):(at(e),t.push(e))}function l(e){var t;ct(t=e.context)&&ct(t=t.$options._scopeId)&&C.setAttribute(e.elm,t,""),ct(t=ti)&&t!==e.context&&ct(t=t.$options._scopeId)&&C.setAttribute(e.elm,t,"")}function f(e,t,n,r,o,a){for(;r<=o;++r)C.insertBefore(e,i(n[r],a),t)}function d(e){var t,n,r=e.data;if(ct(r))for(ct(t=r.hook)&&ct(t=t.destroy)&&t(e),t=0;t<$.destroy.length;++t)$.destroy[t](e);if(ct(t=e.child)&&!r.keepAlive&&d(t._vnode),ct(t=e.children))for(n=0;n<e.children.length;++n)d(e.children[n])}function p(e,t,n,r){for(;n<=r;++n){var i=t[n];ct(i)&&(ct(i.tag)?(v(i),d(i)):C.removeChild(e,i.elm))}}function v(e,t){if(t||ct(e.data)){var i=$.remove.length+1;for(t?t.listeners+=i:t=n(e.elm,i),ct(_=e.child)&&ct(_=_._vnode)&&ct(_.data)&&v(_,t),_=0;_<$.remove.length;++_)$.remove[_](e,t);ct(_=e.data.hook)&&ct(_=_.remove)?_(e,t):t()}else r(e.elm)}function h(e,t,n,r,o){for(var a,s,c,u,l=0,d=0,v=t.length-1,h=t[0],g=t[v],y=n.length-1,_=n[0],b=n[y],$=!o;l<=v&&d<=y;)st(h)?h=t[++l]:st(g)?g=t[--v]:ut(h,_)?(m(h,_,r),h=t[++l],_=n[++d]):ut(g,b)?(m(g,b,r),g=t[--v],b=n[--y]):ut(h,b)?(m(h,b,r),$&&C.insertBefore(e,h.elm,C.nextSibling(g.elm)),h=t[++l],b=n[--y]):ut(g,_)?(m(g,_,r),$&&C.insertBefore(e,g.elm,h.elm),g=t[--v],_=n[++d]):(st(a)&&(a=lt(t,l,v)),s=ct(_.key)?a[_.key]:null,st(s)?(C.insertBefore(e,i(_,r),h.elm),_=n[++d]):(c=t[s],c.tag!==_.tag?(C.insertBefore(e,i(_,r),h.elm),_=n[++d]):(m(c,_,r),t[s]=void 0,$&&C.insertBefore(e,_.elm,h.elm),_=n[++d])));l>v?(u=st(n[y+1])?null:n[y+1].elm,f(e,u,n,d,y,r)):d>y&&p(e,t,l,v)}function m(e,t,n,r){if(e!==t){if(t.isStatic&&e.isStatic&&t.key===e.key&&t.isCloned)return void(t.elm=e.elm);var i,o,a=ct(i=t.data);a&&ct(o=i.hook)&&ct(i=o.prepatch)&&i(e,t);var c=t.elm=e.elm,u=e.children,l=t.children;if(a&&s(t)){for(i=0;i<$.update.length;++i)$.update[i](e,t);ct(o)&&ct(i=o.update)&&i(e,t)}if(st(t.text)?ct(u)&&ct(l)?u!==l&&h(c,u,l,n,r):ct(l)?(ct(e.text)&&C.setTextContent(c,""),f(c,null,l,0,l.length-1,n)):ct(u)?p(c,u,0,u.length-1):ct(e.text)&&C.setTextContent(c,""):e.text!==t.text&&C.setTextContent(c,t.text),a){for(i=0;i<$.postpatch.length;++i)$.postpatch[i](e,t);ct(o)&&ct(i=o.postpatch)&&i(e,t)}}}function g(e,t,n){if(n&&e.parent)e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}function y(e,t,n){t.elm=e;var r=t.tag,i=t.data,o=t.children;if(ct(i)&&(ct(_=i.hook)&&ct(_=_.init)&&_(t,!0),ct(_=t.child)))return u(t,n),!0;if(ct(r)){if(ct(o)){var s=C.childNodes(e);if(s.length){var l=!0;if(s.length!==o.length)l=!1;else for(var f=0;f<o.length;f++)if(!y(s[f],o[f],n)){l=!1;break}if(!l)return!1}else a(t,o,n)}ct(i)&&c(t,n)}return!0}var _,b,$={},w=e.modules,C=e.nodeOps;for(_=0;_<Di.length;++_)for($[Di[_]]=[],b=0;b<w.length;++b)void 0!==w[b][Di[_]]&&$[Di[_]].push(w[b][Di[_]]);return function(e,n,r,o){var a,c,u=!1,l=[];if(e){var f=ct(e.nodeType);if(!f&&ut(e,n))m(e,n,l,o);else{if(f){if(1===e.nodeType&&e.hasAttribute("server-rendered")&&(e.removeAttribute("server-rendered"),r=!0),r&&y(e,n,l))return g(n,l,!0),e;e=t(e)}if(a=e.elm,c=C.parentNode(a),i(n,l),n.parent&&(n.parent.elm=n.elm,s(n)))for(var v=0;v<$.create.length;++v)$.create[v](Li,n.parent);null!==c?(C.insertBefore(c,n.elm,C.nextSibling(a)),p(c,[e],0,0)):ct(e.tag)&&d(e)}}else u=!0,i(n,l);return g(n,l,u),n.elm}}function dt(e,t,n){var r=t.data.directives;if(r)for(var i=0;i<r.length;i++){var o=r[i],a=Ee(t.context.$options,"directives",o.name,!0);if(a){var s=e&&e.data.directives;s&&(o.oldValue=s[i].value),o.modifiers||(o.modifiers=Mi),n(a,o)}}}function pt(e,t,n){dt(e,t,function(r,i){vt(r,i,n,t,e)})}function vt(e,t,n,r,i){var o=e&&e[n];o&&o(r.elm,t,r,i)}function ht(e,t){if(e.data.attrs||t.data.attrs){var n,r,i,o=t.elm,a=e.data.attrs||{},s=t.data.attrs||{};s.__ob__&&(s=t.data.attrs=u({},s));for(n in s)r=s[n],i=a[n],i!==r&&mt(o,n,r);for(n in a)null==s[n]&&(gi(n)?o.removeAttributeNS(mi,yi(n)):vi(n)||o.removeAttribute(n))}}function mt(e,t,n){hi(t)?_i(n)?e.removeAttribute(t):e.setAttribute(t,t):vi(t)?e.setAttribute(t,_i(n)||"false"===n?"false":"true"):gi(t)?_i(n)?e.removeAttributeNS(mi,yi(t)):e.setAttributeNS(mi,t,n):_i(n)?e.removeAttribute(t):e.setAttribute(t,n)}function gt(e,t){var n=t.elm,r=t.data,i=e.data;if(r.staticClass||r.class||i&&(i.staticClass||i.class)){var o=Fe(t),a=n._transitionClasses;a&&(o=Ue(o,ze(a))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}function yt(e,t){if(e.data.on||t.data.on){var n=t.data.on||{},r=e.data.on||{},i=t.elm._v_add||(t.elm._v_add=function(e,n,r){t.elm.addEventListener(e,n,r)}),o=t.elm._v_remove||(t.elm._v_remove=function(e,n){t.elm.removeEventListener(e,n)});G(n,r,i,o)}}function _t(e,t){if(e.data.domProps||t.data.domProps){var n,r,i=t.elm,o=e.data.domProps||{},a=t.data.domProps||{};a.__ob__&&(a=t.data.domProps=u({},a));for(n in o)null==a[n]&&(i[n]=void 0);for(n in a)if("textContent"!==n&&"innerHTML"!==n||!t.children||(t.children.length=0),r=a[n],"value"===n){i._value=r;var s=null==r?"":String(r);i.value!==s&&(i.value=s)}else i[n]=r}}function bt(e,t){if(e.data&&e.data.style||t.data.style){var n,r,i=t.elm,o=e.data.style||{},a=t.data.style||{};if("string"==typeof a)return void(i.style.cssText=a);var s=a.__ob__;Array.isArray(a)&&(a=t.data.style=d(a)),s&&(a=t.data.style=u({},a));for(r in o)a[r]||(i.style[Ui(r)]="");for(r in a)n=a[r],n!==o[r]&&(i.style[Ui(r)]=null==n?"":n)}}function $t(e,t){if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+e.getAttribute("class")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function wt(e,t){if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t);else{for(var n=" "+e.getAttribute("class")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");e.setAttribute("class",n.trim())}}function Ct(e){Yi(function(){Yi(e)})}function xt(e,t){(e._transitionClasses||(e._transitionClasses=[])).push(t),$t(e,t)}function kt(e,t){e._transitionClasses&&r(e._transitionClasses,t),wt(e,t)}function At(e,t,n){var r=Ot(e,t),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===Ji?Wi:Gi,c=0,u=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=a&&u()};setTimeout(function(){c<a&&u()},o+1),e.addEventListener(s,l)}function Ot(e,t){var n,r=window.getComputedStyle(e),i=r[Ki+"Delay"].split(", "),o=r[Ki+"Duration"].split(", "),a=Tt(i,o),s=r[Zi+"Delay"].split(", "),c=r[Zi+"Duration"].split(", "),u=Tt(s,c),l=0,f=0;t===Ji?a>0&&(n=Ji,l=a,f=o.length):t===qi?u>0&&(n=qi,l=u,f=c.length):(l=Math.max(a,u),n=l>0?a>u?Ji:qi:null,f=n?n===Ji?o.length:c.length:0);var d=n===Ji&&Qi.test(r[Ki+"Property"]);return{type:n,timeout:l,propCount:f,hasTransform:d}}function Tt(e,t){return Math.max.apply(null,t.map(function(t,n){return St(t)+St(e[n])}))}function St(e){return 1e3*Number(e.slice(0,-1))}function Et(e){var t=e.elm;t._leaveCb&&(t._leaveCb.cancelled=!0,t._leaveCb());var n=Lt(e.data.transition);if(n&&!t._enterCb&&1===t.nodeType){var r=n.css,i=n.type,o=n.enterClass,a=n.enterActiveClass,s=n.appearClass,c=n.appearActiveClass,u=n.beforeEnter,l=n.enter,f=n.afterEnter,d=n.enterCancelled,p=n.beforeAppear,v=n.appear,h=n.afterAppear,m=n.appearCancelled,g=ti.$vnode,y=g&&g.parent?g.parent.context:ti,_=!y._isMounted||!e.isRootInsert;if(!_||v||""===v){var b=_?s:o,$=_?c:a,w=_?p||u:u,C=_&&"function"==typeof v?v:l,x=_?h||f:f,k=_?m||d:d,A=r!==!1&&!Er,O=C&&(C._length||C.length)>1,T=t._enterCb=Dt(function(){A&&kt(t,$),T.cancelled?(A&&kt(t,b),k&&k(t)):x&&x(t),t._enterCb=null});e.data.show||Z(e.data.hook||(e.data.hook={}),"insert",function(){var n=t.parentNode,r=n&&n._pending&&n._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),C&&C(t,T)}),w&&w(t),A&&(xt(t,b),xt(t,$),Ct(function(){kt(t,b),T.cancelled||O||At(t,i,T)})),e.data.show&&C&&C(t,T),A||O||T()}}}function jt(e,t){function n(){m.cancelled||(e.data.show||((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),u&&u(r),v&&(xt(r,s),xt(r,c),Ct(function(){kt(r,s),m.cancelled||h||At(r,a,m)})),l&&l(r,m),v||h||m())}var r=e.elm;r._enterCb&&(r._enterCb.cancelled=!0,r._enterCb());var i=Lt(e.data.transition);if(!i)return t();if(!r._leaveCb&&1===r.nodeType){var o=i.css,a=i.type,s=i.leaveClass,c=i.leaveActiveClass,u=i.beforeLeave,l=i.leave,f=i.afterLeave,d=i.leaveCancelled,p=i.delayLeave,v=o!==!1&&!Er,h=l&&(l._length||l.length)>1,m=r._leaveCb=Dt(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),v&&kt(r,c),m.cancelled?(v&&kt(r,s),d&&d(r)):(t(),f&&f(r)),r._leaveCb=null});p?p(n):n()}}function Lt(e){if(e){if("object"==typeof e){var t={};return e.css!==!1&&u(t,Xi(e.name||"v")),u(t,e),t}return"string"==typeof e?Xi(e):void 0}}function Dt(e){var t=!1;return function(){t||(t=!0,e())}}function Nt(e,t,n){var r=t.value,i=e.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,c=e.options.length;s<c;s++)if(a=e.options[s],i)o=m(r,Pt(a))>-1,a.selected!==o&&(a.selected=o);else if(h(Pt(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}}function Mt(e,t){for(var n=0,r=t.length;n<r;n++)if(h(Pt(t[n]),e))return!1;return!0}function Pt(e){return"_value"in e?e._value:e.value}function Rt(e){e.target.composing=!0}function It(e){e.target.composing=!1,Ft(e.target,"input")}function Ft(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Bt(e){return!e.child||e.data&&e.data.transition?e:Bt(e.child._vnode)}function Ht(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Ht(W(t.children)):e}function Ut(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var o in i)t[gr(o)]=i[o].fn;return t}function zt(e,t){return/\d-keep-alive$/.test(t.tag)?e("keep-alive"):null}function Vt(e){for(;e=e.parent;)if(e.data.transition)return!0}function Jt(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function qt(e){e.data.newPos=e.elm.getBoundingClientRect()}function Kt(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}function Wt(e,t){var n=document.createElement("div");return n.innerHTML='<div a="'+e+'">',n.innerHTML.indexOf(t)>0}function Zt(e){return ho.innerHTML=e,ho.textContent}function Gt(e,t,n){return t&&(e=e.replace(qo,"<").replace(Ko,">")),n&&(e=e.replace(Wo,"\n")),e.replace(Zo,"&").replace(Go,'"')}function Yt(e,t){function n(t){d+=t,e=e.substring(t)}function r(){var t=e.match(wo);if(t){var r={tagName:t[1],attrs:[],start:d};n(t[0].length);for(var i,o;!(i=e.match(Co))&&(o=e.match(_o));)n(o[0].length),r.attrs.push(o);if(i)return r.unarySlash=i[1],n(i[0].length),r.end=d,r}}function i(e){var n=e.tagName,r=e.unarySlash;u&&("p"===s&&xi(n)&&o("",s),Ci(n)&&s===n&&o("",n));for(var i=l(n)||"html"===n&&"head"===s||!!r,a=e.attrs.length,d=new Array(a),p=0;p<a;p++){var v=e.attrs[p];Ao&&v[0].indexOf('""')===-1&&(""===v[3]&&delete v[3],
""===v[4]&&delete v[4],""===v[5]&&delete v[5]);var h=v[3]||v[4]||v[5]||"";d[p]={name:v[1],value:f?Gt(h,t.shouldDecodeTags,t.shouldDecodeNewlines):h}}i||(c.push({tag:n,attrs:d}),s=n,r=""),t.start&&t.start(n,d,i,e.start,e.end)}function o(e,n,r,i){var o;if(null==r&&(r=d),null==i&&(i=d),n){var a=n.toLowerCase();for(o=c.length-1;o>=0&&c[o].tag.toLowerCase()!==a;o--);}else o=0;if(o>=0){for(var u=c.length-1;u>=o;u--)t.end&&t.end(c[u].tag,r,i);c.length=o,s=o&&c[o-1].tag}else"br"===n.toLowerCase()?t.start&&t.start(n,[],!0,r,i):"p"===n.toLowerCase()&&(t.start&&t.start(n,[],!1,r,i),t.end&&t.end(n,r,i))}for(var a,s,c=[],u=t.expectHTML,l=t.isUnaryTag||Cr,f=t.isFromDOM,d=0;e;){if(a=e,s&&Vo(s)){var p=s.toLowerCase(),v=Jo[p]||(Jo[p]=new RegExp("([\\s\\S]*?)(</"+p+"[^>]*>)","i")),h=0,m=e.replace(v,function(e,n,r){return h=r.length,"script"!==p&&"style"!==p&&"noscript"!==p&&(n=n.replace(/<!--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)\]\]>/g,"$1")),t.chars&&t.chars(n),""});d+=e.length-m.length,e=m,o("</"+p+">",p,d-h,d)}else{var g=e.indexOf("<");if(0===g){if(/^<!--/.test(e)){var y=e.indexOf("-->");if(y>=0){n(y+3);continue}}if(/^<!\[/.test(e)){var _=e.indexOf("]>");if(_>=0){n(_+2);continue}}var b=e.match(ko);if(b){n(b[0].length);continue}var $=e.match(xo);if($){var w=d;n($[0].length),o($[0],$[1],w,d);continue}var C=r();if(C){i(C);continue}}var x=void 0;g>=0?(x=e.substring(0,g),n(g)):(x=e,e=""),t.chars&&t.chars(x)}if(e===a)throw new Error("Error parsing template:\n\n"+e)}o()}function Qt(e){function t(){(a||(a=[])).push(e.slice(d,i).trim()),d=i+1}var n,r,i,o,a,s=!1,c=!1,u=0,l=0,f=0,d=0;for(i=0;i<e.length;i++)if(r=n,n=e.charCodeAt(i),s)39===n&&92!==r&&(s=!s);else if(c)34===n&&92!==r&&(c=!c);else if(124!==n||124===e.charCodeAt(i+1)||124===e.charCodeAt(i-1)||u||l||f)switch(n){case 34:c=!0;break;case 39:s=!0;break;case 40:f++;break;case 41:f--;break;case 91:l++;break;case 93:l--;break;case 123:u++;break;case 125:u--}else void 0===o?(d=i+1,o=e.slice(0,i).trim()):t();if(void 0===o?o=e.slice(0,i).trim():0!==d&&t(),a)for(i=0;i<a.length;i++)o=Xt(o,a[i]);return o}function Xt(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),i=t.slice(n+1);return'_f("'+r+'")('+e+","+i}function en(e,t){var n=t?Xo(t):Yo;if(n.test(e)){for(var r,i,o=[],a=n.lastIndex=0;r=n.exec(e);){i=r.index,i>a&&o.push(JSON.stringify(e.slice(a,i)));var s=Qt(r[1].trim());o.push("_s("+s+")"),a=i+r[0].length}return a<e.length&&o.push(JSON.stringify(e.slice(a))),o.join("+")}}function tn(e){console.error("[Vue parser]: "+e)}function nn(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function rn(e,t,n){(e.props||(e.props=[])).push({name:t,value:n})}function on(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n})}function an(e,t,n,r,i){(e.directives||(e.directives=[])).push({name:t,value:n,arg:r,modifiers:i})}function sn(e,t,n,r,i){r&&r.capture&&(delete r.capture,t="!"+t);var o;r&&r.native?(delete r.native,o=e.nativeEvents||(e.nativeEvents={})):o=e.events||(e.events={});var a={value:n,modifiers:r},s=o[t];Array.isArray(s)?i?s.unshift(a):s.push(a):s?o[t]=i?[a,s]:[s,a]:o[t]=a}function cn(e,t,n){var r=un(e,":"+t)||un(e,"v-bind:"+t);if(null!=r)return r;if(n!==!1){var i=un(e,t);if(null!=i)return JSON.stringify(i)}}function un(e,t){var n;if(null!=(n=e.attrsMap[t]))for(var r=e.attrsList,i=0,o=r.length;i<o;i++)if(r[i].name===t){r.splice(i,1);break}return n}function ln(e,t){Oo=t.warn||tn,To=t.getTagNamespace||Cr,So=t.mustUseProp||Cr,Eo=t.isPreTag||Cr,jo=nn(t.modules,"preTransformNode"),Lo=nn(t.modules,"transformNode"),Do=nn(t.modules,"postTransformNode"),No=t.delimiters;var n,r,i=[],o=t.preserveWhitespace!==!1,a=!1,s=!1;return Yt(e,{expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,isFromDOM:t.isFromDOM,shouldDecodeTags:t.shouldDecodeTags,shouldDecodeNewlines:t.shouldDecodeNewlines,start:function(e,o,c){function u(e){}var l=r&&r.ns||To(e);t.isIE&&"svg"===l&&(o=On(o));var f={type:1,tag:e,attrsList:o,attrsMap:xn(o),parent:r,children:[]};l&&(f.ns=l),An(f)&&(f.forbidden=!0);for(var d=0;d<jo.length;d++)jo[d](f,t);if(a||(fn(f),f.pre&&(a=!0)),Eo(f.tag)&&(s=!0),a)dn(f);else{hn(f),mn(f),yn(f),pn(f),f.plain=!f.key&&!o.length,vn(f),_n(f),bn(f);for(var p=0;p<Lo.length;p++)Lo[p](f,t);$n(f)}n||(n=f,u(n)),r&&!f.forbidden&&(f.else?gn(f,r):(r.children.push(f),f.parent=r)),c||(r=f,i.push(f));for(var v=0;v<Do.length;v++)Do[v](f,t)},end:function(){var e=i[i.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&e.children.pop(),i.length-=1,r=i[i.length-1],e.pre&&(a=!1),Eo(e.tag)&&(s=!1)},chars:function(e){if(r&&(e=s||e.trim()?sa(e):o&&r.children.length?" ":"")){var t;!a&&" "!==e&&(t=en(e,No))?r.children.push({type:2,expression:t,text:e}):r.children.push({type:3,text:e})}}}),n}function fn(e){null!=un(e,"v-pre")&&(e.pre=!0)}function dn(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}function pn(e){var t=cn(e,"key");t&&(e.key=t)}function vn(e){var t=cn(e,"ref");t&&(e.ref=t,e.refInFor=wn(e))}function hn(e){var t;if(t=un(e,"v-for")){var n=t.match(ta);if(!n)return;e.for=n[2].trim();var r=n[1].trim(),i=r.match(na);i?(e.alias=i[1].trim(),e.iterator1=i[2].trim(),i[3]&&(e.iterator2=i[3].trim())):e.alias=r}}function mn(e){var t=un(e,"v-if");t&&(e.if=t),null!=un(e,"v-else")&&(e.else=!0)}function gn(e,t){var n=kn(t.children);n&&n.if&&(n.elseBlock=e)}function yn(e){var t=un(e,"v-once");null!=t&&(e.once=!0)}function _n(e){if("slot"===e.tag)e.slotName=cn(e,"name");else{var t=cn(e,"slot");t&&(e.slotTarget=t)}}function bn(e){var t;(t=cn(e,"is"))&&(e.component=t),null!=un(e,"inline-template")&&(e.inlineTemplate=!0)}function $n(e){var t,n,r,i,o,a,s,c=e.attrsList;for(t=0,n=c.length;t<n;t++)if(r=c[t].name,i=c[t].value,ea.test(r))if(e.hasBindings=!0,a=Cn(r),a&&(r=r.replace(aa,"")),ra.test(r))r=r.replace(ra,""),a&&a.prop&&(s=!0,r=gr(r),"innerHtml"===r&&(r="innerHTML")),s||So(r)?rn(e,r,i):on(e,r,i);else if(ia.test(r))r=r.replace(ia,""),sn(e,r,i,a);else{r=r.replace(ea,"");var u=r.match(oa);u&&(o=u[1])&&(r=r.slice(0,-(o.length+1))),an(e,r,i,o,a)}else on(e,r,JSON.stringify(i))}function wn(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function Cn(e){var t=e.match(aa);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function xn(e){for(var t={},n=0,r=e.length;n<r;n++)t[e[n].name]=e[n].value;return t}function kn(e){for(var t=e.length;t--;)if(e[t].tag)return e[t]}function An(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}function On(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];ca.test(r.name)||(r.name=r.name.replace(ua,""),t.push(r))}return t}function Tn(e,t){e&&(Mo=la(t.staticKeys||""),Po=t.isReservedTag||function(){return!1},En(e),jn(e,!1))}function Sn(e){return n("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))}function En(e){if(e.static=Ln(e),1===e.type)for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];En(r),r.static||(e.static=!1)}}function jn(e,t){if(1===e.type){if(e.once||e.static)return e.staticRoot=!0,void(e.staticInFor=t);if(e.children)for(var n=0,r=e.children.length;n<r;n++)jn(e.children[n],!!e.for)}}function Ln(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||vr(e.tag)||!Po(e.tag)||!Object.keys(e).every(Mo))))}function Dn(e,t){var n=t?"nativeOn:{":"on:{";for(var r in e)n+='"'+r+'":'+Nn(e[r])+",";return n.slice(0,-1)+"}"}function Nn(e){if(e){if(Array.isArray(e))return"["+e.map(Nn).join(",")+"]";if(e.modifiers){var t="",n=[];for(var r in e.modifiers)pa[r]?t+=pa[r]:n.push(r);n.length&&(t=Mn(n)+t);var i=fa.test(e.value)?e.value+"($event)":e.value;return"function($event){"+t+i+"}"}return fa.test(e.value)?e.value:"function($event){"+e.value+"}"}return"function(){}"}function Mn(e){var t=1===e.length?Pn(e[0]):Array.prototype.concat.apply([],e.map(Pn));return Array.isArray(t)?"if("+t.map(function(e){return"$event.keyCode!=="+e}).join("&&")+")return;":"if($event.keyCode!=="+t+")return;"}function Pn(e){return parseInt(e,10)||da[e]||"_k("+JSON.stringify(e)+")"}function Rn(e,t){e.wrapData=function(e){return"_b("+e+","+t.value+(t.modifiers&&t.modifiers.prop?",true":"")+")"}}function In(e,t){var n=Ho,r=Ho=[];Uo=t,Ro=t.warn||tn,Io=nn(t.modules,"transformCode"),Fo=nn(t.modules,"genData"),Bo=t.directives||{};var i=e?Fn(e):'_h("div")';return Ho=n,{render:"with(this){return "+i+"}",staticRenderFns:r}}function Fn(e){if(e.staticRoot&&!e.staticProcessed)return e.staticProcessed=!0,Ho.push("with(this){return "+Fn(e)+"}"),"_m("+(Ho.length-1)+(e.staticInFor?",true":"")+")";if(e.for&&!e.forProcessed)return Un(e);if(e.if&&!e.ifProcessed)return Bn(e);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return Wn(e);var t;if(e.component)t=Zn(e);else{var n=zn(e),r=e.inlineTemplate?null:Jn(e);t="_h('"+e.tag+"'"+(n?","+n:"")+(r?","+r:"")+")"}for(var i=0;i<Io.length;i++)t=Io[i](e,t);return t}return Jn(e)||"void 0"}function Bn(e){var t=e.if;return e.ifProcessed=!0,"("+t+")?"+Fn(e)+":"+Hn(e)}function Hn(e){return e.elseBlock?Fn(e.elseBlock):"_e()"}function Un(e){var t=e.for,n=e.alias,r=e.iterator1?","+e.iterator1:"",i=e.iterator2?","+e.iterator2:"";return e.forProcessed=!0,"_l(("+t+"),function("+n+r+i+"){return "+Fn(e)+"})"}function zn(e){if(!e.plain){var t="{",n=Vn(e);n&&(t+=n+","),e.key&&(t+="key:"+e.key+","),e.ref&&(t+="ref:"+e.ref+","),e.refInFor&&(t+="refInFor:true,"),e.component&&(t+='tag:"'+e.tag+'",'),e.slotTarget&&(t+="slot:"+e.slotTarget+",");for(var r=0;r<Fo.length;r++)t+=Fo[r](e);if(e.attrs&&(t+="attrs:{"+Gn(e.attrs)+"},"),e.props&&(t+="domProps:{"+Gn(e.props)+"},"),e.events&&(t+=Dn(e.events)+","),e.nativeEvents&&(t+=Dn(e.nativeEvents,!0)+","),e.inlineTemplate){var i=e.children[0];if(1===i.type){var o=In(i,Uo);t+="inlineTemplate:{render:function(){"+o.render+"},staticRenderFns:["+o.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}return t=t.replace(/,$/,"")+"}",e.wrapData&&(t=e.wrapData(t)),t}}function Vn(e){var t=e.directives;if(t){var n,r,i,o,a="directives:[",s=!1;for(n=0,r=t.length;n<r;n++){i=t[n],o=!0;var c=Bo[i.name]||va[i.name];c&&(o=!!c(e,i,Ro)),o&&(s=!0,a+='{name:"'+i.name+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?',arg:"'+i.arg+'"':"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return s?a.slice(0,-1)+"]":void 0}}function Jn(e){if(e.children.length)return"["+e.children.map(qn).join(",")+"]"}function qn(e){return 1===e.type?Fn(e):Kn(e)}function Kn(e){return 2===e.type?e.expression:JSON.stringify(e.text)}function Wn(e){var t=e.slotName||'"default"',n=Jn(e);return n?"_t("+t+","+n+")":"_t("+t+")"}function Zn(e){var t=Jn(e);return"_h("+e.component+","+zn(e)+(t?","+t:"")+")"}function Gn(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+r.value+","}return t.slice(0,-1)}function Yn(e,t){var n=ln(e.trim(),t);Tn(n,t);var r=In(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}}function Qn(e,t){var n=(t.warn||tn,un(e,"class"));n&&(e.staticClass=JSON.stringify(n));var r=cn(e,"class",!1);r&&(e.classBinding=r)}function Xn(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}function er(e){var t=cn(e,"style",!1);t&&(e.styleBinding=t)}function tr(e){return e.styleBinding?"style:("+e.styleBinding+"),":""}function nr(e,t,n){zo=n;var r=t.value,i=t.modifiers,o=e.tag,a=e.attrsMap.type;if("select"===o)return ar(e,r);if("input"===o&&"checkbox"===a)rr(e,r);else{if("input"!==o||"radio"!==a)return or(e,r,i);ir(e,r)}}function rr(e,t){var n=cn(e,"value")||"null",r=cn(e,"true-value")||"true",i=cn(e,"false-value")||"false";rn(e,"checked","Array.isArray("+t+")?_i("+t+","+n+")>-1:_q("+t+","+r+")"),sn(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+r+"):("+i+");if(Array.isArray($$a)){var $$v="+n+",$$i=_i($$a,$$v);if($$c){$$i<0&&("+t+"=$$a.concat($$v))}else{$$i>-1&&("+t+"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{"+t+"=$$c}",null,!0)}function ir(e,t){var n=cn(e,"value")||"null";rn(e,"checked","_q("+t+","+n+")"),sn(e,"change",t+"="+n,null,!0)}function or(e,t,n){var r=e.attrsMap.type,i=n||{},o=i.lazy,a=i.number,s=i.trim,c=o||Sr&&"range"===r?"change":"input",u=!o&&"range"!==r,l="input"===e.tag||"textarea"===e.tag,f=l?"$event.target.value"+(s?".trim()":""):"$event",d=a||"number"===r?t+"=_n("+f+")":t+"="+f;if(l&&u&&(d="if($event.target.composing)return;"+d),rn(e,"value",l?"_s("+t+")":"("+t+")"),sn(e,c,d,null,!0),u)return!0}function ar(e,t){var n=t+'=Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){return "_value" in o ? o._value : o.value})'+(null==e.attrsMap.multiple?"[0]":"");return sn(e,"change",n,null,!0),!0}function sr(e,t){t.value&&rn(e,"textContent","_s("+t.value+")")}function cr(e,t){t.value&&rn(e,"innerHTML","_s("+t.value+")")}function ur(e,t){return t=t?u(u({},ba),t):ba,Yn(e,t)}function lr(e,t,n){var r=(t&&t.warn||ai,t&&t.delimiters?String(t.delimiters)+e:e);if(_a[r])return _a[r];var i={},o=ur(e,t);i.render=fr(o.render);var a=o.staticRenderFns.length;i.staticRenderFns=new Array(a);for(var s=0;s<a;s++)i.staticRenderFns[s]=fr(o.staticRenderFns[s]);return _a[r]=i}function fr(e){try{return new Function(e)}catch(e){return p}}function dr(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}var pr,vr=n("slot,component",!0),hr=Object.prototype.hasOwnProperty,mr=/-(\w)/g,gr=a(function(e){return e.replace(mr,function(e,t){return t?t.toUpperCase():""})}),yr=a(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),_r=/([^-])([A-Z])/g,br=a(function(e){return e.replace(_r,"$1-$2").replace(_r,"$1-$2").toLowerCase()}),$r=Object.prototype.toString,wr="[object Object]",Cr=function(){return!1},xr={optionMergeStrategies:Object.create(null),silent:!1,devtools:!1,errorHandler:null,ignoredElements:null,keyCodes:Object.create(null),isReservedTag:Cr,isUnknownElement:Cr,getTagNamespace:p,mustUseProp:Cr,_assetTypes:["component","directive","filter"],_lifecycleHooks:["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated"],_maxUpdateCount:100,_isServer:!1},kr=/[^\w\.\$]/,Ar="__proto__"in{},Or="undefined"!=typeof window&&"[object Object]"!==Object.prototype.toString.call(window),Tr=Or&&window.navigator.userAgent.toLowerCase(),Sr=Tr&&/msie|trident/.test(Tr),Er=Tr&&Tr.indexOf("msie 9.0")>0,jr=Tr&&Tr.indexOf("edge/")>0,Lr=Tr&&Tr.indexOf("android")>0,Dr=Tr&&/iphone|ipad|ipod|ios/.test(Tr),Nr=Or&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Mr=function(){function e(){r=!1;var e=n.slice(0);n.length=0;for(var t=0;t<e.length;t++)e[t]()}var t,n=[],r=!1;if("undefined"!=typeof Promise&&b(Promise)){var i=Promise.resolve();t=function(){i.then(e),Dr&&setTimeout(p)}}else if("undefined"==typeof MutationObserver||!b(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())t=setTimeout;else{var o=1,a=new MutationObserver(e),s=document.createTextNode(String(o));a.observe(s,{characterData:!0}),t=function(){o=(o+1)%2,s.data=String(o)}}return function(i,o){var a=o?function(){i.call(o)}:i;n.push(a),r||(r=!0,t(e,0))}}();pr="undefined"!=typeof Set&&b(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return void 0!==this.set[e]},e.prototype.add=function(e){this.set[e]=1},e.prototype.clear=function(){this.set=Object.create(null)},e}();var Pr=0,Rr=function(){this.id=Pr++,this.subs=[]};Rr.prototype.addSub=function(e){this.subs.push(e)},Rr.prototype.removeSub=function(e){r(this.subs,e)},Rr.prototype.depend=function(){Rr.target&&Rr.target.addDep(this)},Rr.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},Rr.target=null;var Ir=[],Fr=[],Br={},Hr=!1,Ur=!1,zr=0,Vr=0,Jr=function(e,t,n,r){void 0===r&&(r={}),this.vm=e,e._watchers.push(this),this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.expression=t.toString(),this.cb=n,this.id=++Vr,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new pr,this.newDepIds=new pr,"function"==typeof t?this.getter=t:(this.getter=_(t),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};Jr.prototype.get=function(){$(this);var e=this.getter.call(this.vm,this.vm);return this.deep&&A(e),w(),this.cleanupDeps(),e},Jr.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Jr.prototype.cleanupDeps=function(){for(var e=this,t=this.deps.length;t--;){var n=e.deps[t];e.newDepIds.has(n.id)||n.removeSub(e)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},Jr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():k(this)},Jr.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){if(!xr.errorHandler)throw e;xr.errorHandler.call(null,e,this.vm)}else this.cb.call(this.vm,e,t)}}},Jr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Jr.prototype.depend=function(){for(var e=this,t=this.deps.length;t--;)e.deps[t].depend()},Jr.prototype.teardown=function(){var e=this;if(this.active){this.vm._isBeingDestroyed||this.vm._vForRemoving||r(this.vm._watchers,this);for(var t=this.deps.length;t--;)e.deps[t].removeSub(e);this.active=!1}};var qr=new pr,Kr=Array.prototype,Wr=Object.create(Kr);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=Kr[e];y(Wr,e,function(){for(var n=arguments,r=arguments.length,i=new Array(r);r--;)i[r]=n[r];var o,a=t.apply(this,i),s=this.__ob__;switch(e){case"push":o=i;break;case"unshift":o=i;break;case"splice":o=i.slice(2)}return o&&s.observeArray(o),s.dep.notify(),a})});var Zr=Object.getOwnPropertyNames(Wr),Gr={shouldConvert:!0,isSettingProps:!1},Yr=function(e){if(this.value=e,this.dep=new Rr,this.vmCount=0,y(e,"__ob__",this),Array.isArray(e)){var t=Ar?O:T;t(e,Wr,Zr),this.observeArray(e)}else this.walk(e)};Yr.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)E(e,t[n],e[t[n]])},Yr.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)S(e[t])};var Qr={enumerable:!0,configurable:!0,get:p,set:p},Xr=function(e,t,n,r,i,o,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=o,this.context=a,this.key=t&&t.key,this.componentOptions=s,this.child=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1},ei=function(){var e=new Xr;return e.text="",e.isComment=!0,e},ti=null,ni={init:oe,prepatch:ae,insert:se,destroy:ce},ri=Object.keys(ni),ii=0;$e(we),H(we),be(we),ee(we),ge(we);var oi,ai=p,si=xr.optionMergeStrategies;si.data=function(e,t,n){return n?e||t?function(){var r="function"==typeof t?t.call(n):t,i="function"==typeof e?e.call(n):void 0;return r?Ce(r,i):i}:void 0:t?"function"!=typeof t?e:e?function(){return Ce(t.call(this),e.call(this))}:t:e},xr._lifecycleHooks.forEach(function(e){si[e]=xe}),xr._assetTypes.forEach(function(e){si[e+"s"]=ke}),si.watch=function(e,t){if(!t)return e;if(!e)return t;var n={};u(n,e);for(var r in t){var i=n[r],o=t[r];i&&!Array.isArray(i)&&(i=[i]),n[r]=i?i.concat(o):[o]}return n},si.props=si.methods=si.computed=function(e,t){if(!t)return e;if(!e)return t;var n=Object.create(null);return u(n,e),u(n,t),n};var ci=function(e,t){return void 0===t?e:t},ui=Object.freeze({defineReactive:E,_toString:e,toNumber:t,makeMap:n,isBuiltInTag:vr,remove:r,hasOwn:i,isPrimitive:o,cached:a,camelize:gr,capitalize:yr,hyphenate:br,bind:s,toArray:c,extend:u,isObject:l,isPlainObject:f,toObject:d,noop:p,no:Cr,genStaticKeys:v,looseEqual:h,looseIndexOf:m,isReserved:g,def:y,parsePath:_,hasProto:Ar,inBrowser:Or,UA:Tr,isIE:Sr,isIE9:Er,isEdge:jr,isAndroid:Lr,isIOS:Dr,devtools:Nr,nextTick:Mr,get _Set(){return pr},mergeOptions:Se,resolveAsset:Ee,warn:ai,formatComponentName:oi,validateProp:je}),li={name:"keep-alive",abstract:!0,created:function(){this.cache=Object.create(null)},render:function(){var e=W(this.$slots.default);if(e&&e.componentOptions){var t=e.componentOptions,n=null==e.key?t.Ctor.cid+"::"+t.tag:e.key;this.cache[n]?e.child=this.cache[n].child:this.cache[n]=e,e.data.keepAlive=!0}return e},destroyed:function(){var e=this;for(var t in this.cache){var n=e.cache[t];te(n.child,"deactivated"),n.child.$destroy()}}},fi={KeepAlive:li};Ie(we),Object.defineProperty(we.prototype,"$isServer",{get:function(){return xr._isServer}}),we.version="2.0.1";var di,pi=n("value,selected,checked,muted"),vi=n("contenteditable,draggable,spellcheck"),hi=n("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),mi="http://www.w3.org/1999/xlink",gi=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},yi=function(e){return gi(e)?e.slice(6,e.length):""},_i=function(e){return null==e||e===!1},bi={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},$i=n("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template"),wi=n("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr",!0),Ci=n("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source",!0),xi=n("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track",!0),ki=n("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font,font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ai=function(e){return"pre"===e},Oi=function(e){return $i(e)||ki(e)},Ti=Object.create(null),Si=Object.freeze({createElement:Ke,createElementNS:We,createTextNode:Ze,createComment:Ge,insertBefore:Ye,removeChild:Qe,appendChild:Xe,parentNode:et,nextSibling:tt,tagName:nt,setTextContent:rt,childNodes:it,setAttribute:ot}),Ei={create:function(e,t){at(t)},update:function(e,t){e.data.ref!==t.data.ref&&(at(e,!0),at(t))},destroy:function(e){at(e,!0)}},ji={},Li=new Xr("",ji,[]),Di=["create","update","postpatch","remove","destroy"],Ni={create:function(e,t){var n=!1;dt(e,t,function(r,i){vt(r,i,"bind",t,e),r.inserted&&(n=!0)}),n&&Z(t.data.hook||(t.data.hook={}),"insert",function(){pt(e,t,"inserted")})},update:function(e,t){pt(e,t,"update"),e.data.directives&&!t.data.directives&&pt(e,e,"unbind")},postpatch:function(e,t){pt(e,t,"componentUpdated")},destroy:function(e){pt(e,e,"unbind")}},Mi=Object.create(null),Pi=[Ei,Ni],Ri={create:ht,update:ht},Ii={create:gt,update:gt},Fi={create:yt,update:yt},Bi={create:_t,update:_t},Hi=["Webkit","Moz","ms"],Ui=a(function(e){if(di=di||document.createElement("div"),e=gr(e),"filter"!==e&&e in di.style)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Hi.length;n++){var r=Hi[n]+t;if(r in di.style)return r}}),zi={create:bt,update:bt},Vi=Or&&!Er,Ji="transition",qi="animation",Ki="transition",Wi="transitionend",Zi="animation",Gi="animationend";Vi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ki="WebkitTransition",Wi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Zi="WebkitAnimation",Gi="webkitAnimationEnd"));var Yi=Or&&window.requestAnimationFrame||setTimeout,Qi=/\b(transform|all)(,|$)/,Xi=a(function(e){return{enterClass:e+"-enter",leaveClass:e+"-leave",appearClass:e+"-enter",enterActiveClass:e+"-enter-active",leaveActiveClass:e+"-leave-active",appearActiveClass:e+"-enter-active"}}),eo=Or?{create:function(e,t){t.data.show||Et(t)},remove:function(e,t){e.data.show?t():jt(e,t)}}:{},to=[Ri,Ii,Fi,Bi,zi,eo],no=to.concat(Pi),ro=ft({nodeOps:Si,modules:no});Er&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&Ft(e,"input")});var io={bind:function(e,t,n){if("select"===n.tag){if(Nt(e,t,n.context),Sr||jr){var r=function(){Nt(e,t,n.context)};Mr(r),setTimeout(r,0)}}else"textarea"!==n.tag&&"text"!==e.type||(Lr||(e.addEventListener("compositionstart",Rt),e.addEventListener("compositionend",It)),Er&&(e.vmodel=!0))},componentUpdated:function(e,t,n){if("select"===n.tag){Nt(e,t,n.context);var r=e.multiple?t.value.some(function(t){return Mt(t,e.options)}):Mt(t.value,e.options);r&&Ft(e,"change")}}},oo={bind:function(e,t,n){var r=t.value;n=Bt(n);var i=n.data&&n.data.transition;r&&i&&!Er&&Et(n);var o="none"===e.style.display?"":e.style.display;e.style.display=r?o:"none",e.__vOriginalDisplay=o},update:function(e,t,n){var r=t.value,i=t.oldValue;if(r!==i){n=Bt(n);var o=n.data&&n.data.transition;o&&!Er?r?(Et(n),e.style.display=e.__vOriginalDisplay):jt(n,function(){e.style.display="none"}):e.style.display=r?e.__vOriginalDisplay:"none"}}},ao={model:io,show:oo},so={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String},co={name:"transition",props:so,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(function(e){return e.tag}),n.length)){var r=this.mode,i=n[0];if(Vt(this.$vnode))return i;var o=Ht(i);if(!o)return i;if(this._leaving)return zt(e,i);o.key=null==o.key||o.isStatic?"__v"+(o.tag+this._uid)+"__":o.key;var a=(o.data||(o.data={})).transition=Ut(this),s=this._vnode,c=Ht(s);if(o.data.directives&&o.data.directives.some(function(e){return"show"===e.name})&&(o.data.show=!0),c&&c.data&&c.key!==o.key){var l=c.data.transition=u({},a);if("out-in"===r)return this._leaving=!0,Z(l,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),zt(e,i);if("in-out"===r){var f,d=function(){f()};Z(a,"afterEnter",d),Z(a,"enterCancelled",d),Z(l,"delayLeave",function(e){f=e})}}return i}}},uo=u({tag:String,moveClass:String},so);delete uo.mode;var lo={props:uo,render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=Ut(this),s=0;s<i.length;s++){var c=i[s];c.tag&&null!=c.key&&0!==String(c.key).indexOf("__vlist")&&(o.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a)}if(r){for(var u=[],l=[],f=0;f<r.length;f++){var d=r[f];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?u.push(d):l.push(d)}this.kept=e(t,null,u),this.removed=l}return e(t,null,o)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||this.name+"-move";if(e.length&&this.hasMove(e[0].elm,t)){e.forEach(Jt),e.forEach(qt),e.forEach(Kt);document.body.offsetHeight;e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;xt(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Wi,n._moveCb=function e(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Wi,e),n._moveCb=null,kt(n,t))})}})}},methods:{hasMove:function(e,t){if(!Vi)return!1;if(null!=this._hasMove)return this._hasMove;xt(e,t);var n=Ot(e);return kt(e,t),this._hasMove=n.hasTransform}}},fo={Transition:co,TransitionGroup:lo};we.config.isUnknownElement=Je,we.config.isReservedTag=Oi,we.config.getTagNamespace=Ve,we.config.mustUseProp=pi,u(we.options.directives,ao),u(we.options.components,fo),we.prototype.__patch__=xr._isServer?p:ro,we.prototype.$mount=function(e,t){return e=e&&!xr._isServer?qe(e):void 0,this._mount(e,t)},setTimeout(function(){xr.devtools&&Nr&&Nr.emit("init",we)},0);var po=!!Or&&Wt(">","&gt;"),vo=!!Or&&Wt("\n","&#10;"),ho=document.createElement("div"),mo=/([^\s"'<>\/=]+)/,go=/(?:=)/,yo=[/"([^"]*)"+/.source,/'([^']*)'+/.source,/([^\s"'=<>`]+)/.source],_o=new RegExp("^\\s*"+mo.source+"(?:\\s*("+go.source+")\\s*(?:"+yo.join("|")+"))?"),bo="[a-zA-Z_][\\w\\-\\.]*",$o="((?:"+bo+"\\:)?"+bo+")",wo=new RegExp("^<"+$o),Co=/^\s*(\/?)>/,xo=new RegExp("^<\\/"+$o+"[^>]*>"),ko=/^<!DOCTYPE [^>]+>/i,Ao=!1;"x".replace(/x(.)?/g,function(e,t){Ao=""===t});var Oo,To,So,Eo,jo,Lo,Do,No,Mo,Po,Ro,Io,Fo,Bo,Ho,Uo,zo,Vo=n("script,style",!0),Jo={},qo=/&lt;/g,Ko=/&gt;/g,Wo=/&#10;/g,Zo=/&amp;/g,Go=/&quot;/g,Yo=/\{\{((?:.|\n)+?)\}\}/g,Qo=/[-.*+?^${}()|[\]\/\\]/g,Xo=a(function(e){var t=e[0].replace(Qo,"\\$&"),n=e[1].replace(Qo,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}),ea=/^v-|^@|^:/,ta=/(.*)\s+(?:in|of)\s+(.*)/,na=/\(([^,]*),([^,]*)(?:,([^,]*))?\)/,ra=/^:|^v-bind:/,ia=/^@|^v-on:/,oa=/:(.*)$/,aa=/\.[^\.]+/g,sa=a(Zt),ca=/^xmlns:NS\d+/,ua=/^NS\d+:/,la=a(Sn),fa=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/,da={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},pa={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:"if($event.target !== $event.currentTarget)return;"},va={bind:Rn,cloak:p},ha=(new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),{staticKeys:["staticClass"],transformNode:Qn,genData:Xn}),ma={transformNode:er,genData:tr},ga=[ha,ma],ya={model:nr,text:sr,html:cr},_a=Object.create(null),ba={isIE:Sr,expectHTML:!0,modules:ga,staticKeys:v(ga),directives:ya,isReservedTag:Oi,isUnaryTag:wi,mustUseProp:pi,getTagNamespace:Ve,isPreTag:Ai},$a=a(function(e){var t=qe(e);return t&&t.innerHTML}),wa=we.prototype.$mount;return we.prototype.$mount=function(e,t){if(e=e&&qe(e),e===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var r=n.template,i=!1;if(r)if("string"==typeof r)"#"===r.charAt(0)&&(i=!0,r=$a(r));else{if(!r.nodeType)return this;i=!0,r=r.innerHTML}else e&&(i=!0,r=dr(e));if(r){var o=lr(r,{warn:ai,isFromDOM:i,shouldDecodeTags:po,shouldDecodeNewlines:vo,delimiters:n.delimiters},this),a=o.render,s=o.staticRenderFns;n.render=a,n.staticRenderFns=s}}return wa.call(this,e,t)},we.compile=lr,we});</script>
<script>
    /**
     * vue-router v2.0.0
     * (c) 2016 Evan You
     * @license MIT
     */
    !function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.VueRouter=e()}(this,function(){"use strict";function t(t,e,n){if("/"===t.charAt(0))return t;if("?"===t.charAt(0)||"#"===t.charAt(0))return e+t;var r=e.split("/");n&&r[r.length-1]||r.pop();for(var o=t.replace(/^\//,"").split("/"),i=0;i<o.length;i++){var a=o[i];"."!==a&&(".."===a?r.pop():r.push(a))}return""!==r[0]&&r.unshift(""),r.join("/")}function e(t){var e="",n="",r=t.indexOf("#");r>=0&&(e=t.slice(r),t=t.slice(0,r));var o=t.indexOf("?");return o>=0&&(n=t.slice(o+1),t=t.slice(0,o)),{path:t,query:n,hash:e}}function n(t){return t.replace(/\/\//g,"/")}function r(t,e){if(!t)throw new Error("[vue-router] "+e)}function o(t,e){t||"undefined"!=typeof console&&console.warn("[vue-router] "+e)}function i(t,e){if(void 0===e&&(e={}),t){var n;try{n=a(t)}catch(t){o(!1,t.message),n={}}for(var r in e)n[r]=e[r];return n}return e}function a(t){var e=Object.create(null);return(t=t.trim().replace(/^(\?|#|&)/,""))?(t.split("&").forEach(function(t){var n=t.replace(/\+/g," ").split("="),r=ut(n.shift()),o=n.length>0?ut(n.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]}),e):e}function u(t){var e=t?Object.keys(t).sort().map(function(e){var n=t[e];if(void 0===n)return"";if(null===n)return at(e);if(Array.isArray(n)){var r=[];return n.slice().forEach(function(t){void 0!==t&&(null===t?r.push(at(e)):r.push(at(e)+"="+at(t)))}),r.join("&")}return at(e)+"="+at(n)}).filter(function(t){return t.length>0}).join("&"):null;return e?"?"+e:""}function c(t,e,n){var r={name:e.name||t&&t.name,meta:t&&t.meta||{},path:e.path||"/",hash:e.hash||"",query:e.query||{},params:e.params||{},fullPath:p(e),matched:t?s(t):[]};return n&&(r.redirectedFrom=p(n)),Object.freeze(r)}function s(t){for(var e=[];t;)e.unshift(t),t=t.parent;return e}function p(t){var e=t.path,n=t.query;void 0===n&&(n={});var r=t.hash;return void 0===r&&(r=""),(e||"/")+u(n)+r}function f(t,e){return e===ct?t===e:!!e&&(t.path&&e.path?t.path.replace(st,"")===e.path.replace(st,"")&&t.hash===e.hash&&h(t.query,e.query):!(!t.name||!e.name)&&(t.name===e.name&&t.hash===e.hash&&h(t.query,e.query)&&h(t.params,e.params)))}function h(t,e){void 0===t&&(t={}),void 0===e&&(e={});var n=Object.keys(t),r=Object.keys(e);return n.length===r.length&&n.every(function(n){return String(t[n])===String(e[n])})}function l(t,e){return 0===t.path.indexOf(e.path)&&(!e.hash||t.hash===e.hash)&&d(t.query,e.query)}function d(t,e){for(var n in e)if(!(n in t))return!1;return!0}function y(n,r,o){var a="string"==typeof n?{path:n}:n;if(a.name||a._normalized)return a;var u=e(a.path||""),c=r&&r.path||"/",s=u.path?t(u.path,c,o):r&&r.path||"/",p=i(u.query,a.query),f=a.hash||u.hash;return f&&"#"!==f.charAt(0)&&(f="#"+f),{_normalized:!0,path:s,query:p,hash:f}}function v(t){if(t)for(var e,n=0;n<t.length;n++){if(e=t[n],"a"===e.tag)return e;if(e.children&&(e=v(e.children)))return e}}function m(t){m.installed||(m.installed=!0,Object.defineProperty(t.prototype,"$router",{get:function(){return this.$root._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this.$root._route}}),t.mixin({beforeCreate:function(){this.$options.router&&(this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current))}}),t.component("router-view",it),t.component("router-link",ft))}function g(t){for(var e,n=[],r=0,o=0,i="";null!=(e=wt.exec(t));){var a=e[0],u=e[1],c=e.index;if(i+=t.slice(o,c),o=c+a.length,u)i+=u[1];else{var s=t[o],p=e[2],f=e[3],h=e[4],l=e[5],d=e[6],y=e[7];i&&(n.push(i),i="");var v=null!=p&&null!=s&&s!==p,m="+"===d||"*"===d,g="?"===d||"*"===d,w=e[2]||"/",b=h||l||(y?".*":"[^"+w+"]+?");n.push({name:f||r++,prefix:p||"",delimiter:w,optional:g,repeat:m,partial:v,asterisk:!!y,pattern:E(b)})}}return o<t.length&&(i+=t.substr(o)),i&&n.push(i),n}function w(t){return k(g(t))}function b(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function x(t){return encodeURI(t).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function k(t){for(var e=new Array(t.length),n=0;n<t.length;n++)"object"==typeof t[n]&&(e[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,r){for(var o="",i=n||{},a=r||{},u=a.pretty?b:encodeURIComponent,c=0;c<t.length;c++){var s=t[c];if("string"!=typeof s){var p,f=i[s.name];if(null==f){if(s.optional){s.partial&&(o+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(lt(f)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var h=0;h<f.length;h++){if(p=u(f[h]),!e[c].test(p))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(p)+"`");o+=(0===h?s.prefix:s.delimiter)+p}}else{if(p=s.asterisk?x(f):u(f),!e[c].test(p))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+p+'"');o+=s.prefix+p}}else o+=s}return o}}function O(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function E(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function R(t,e){return t.keys=e,t}function j(t){return t.sensitive?"":"i"}function S(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return R(t,e)}function $(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(T(t[o],e,n).source);var i=new RegExp("(?:"+r.join("|")+")",j(n));return R(i,e)}function A(t,e,n){for(var r=g(t),o=_(r,n),i=0;i<r.length;i++)"string"!=typeof r[i]&&e.push(r[i]);return R(o,e)}function _(t,e){e=e||{};for(var n=e.strict,r=e.end!==!1,o="",i=t[t.length-1],a="string"==typeof i&&/\/$/.test(i),u=0;u<t.length;u++){var c=t[u];if("string"==typeof c)o+=O(c);else{var s=O(c.prefix),p="(?:"+c.pattern+")";c.repeat&&(p+="(?:"+s+p+")*"),p=c.optional?c.partial?s+"("+p+")?":"(?:"+s+"("+p+"))?":s+"("+p+")",o+=p}}return n||(o=(a?o.slice(0,-2):o)+"(?:\\/(?=$))?"),o+=r?"$":n&&a?"":"(?=\\/|$)",new RegExp("^"+o,j(e))}function T(t,e,n){return e=e||[],lt(e)?n||(n={}):(n=e,e=[]),t instanceof RegExp?S(t,e):lt(t)?$(t,e,n):A(t,e,n)}function q(t){var e=Object.create(null),n=Object.create(null);return t.forEach(function(t){C(e,n,t)}),{pathMap:e,nameMap:n}}function C(t,e,n,o,i){var a=n.path,u=n.name;r(null!=a,'"path" is required in a route configuration.');var c={path:P(a,o),components:n.components||{default:n.component},instances:{},name:u,parent:o,matchAs:i,redirect:n.redirect,beforeEnter:n.beforeEnter,meta:n.meta||{}};n.children&&n.children.forEach(function(n){C(t,e,n,c)}),n.alias&&(Array.isArray(n.alias)?n.alias.forEach(function(n){C(t,e,{path:n},o,c.path)}):C(t,e,{path:n.alias},o,c.path)),t[c.path]=c,u&&(e[u]=c)}function P(t,e){return t=t.replace(/\/$/,""),"/"===t[0]?t:null==e?t:n(e.path+"/"+t)}function U(t){function e(t,e,n){var r=y(t,e),o=r.name;if(o){var i=p[o];if(i)return r.path=V(i.path,r.params,'named route "'+o+'"'),a(i,r,n)}else if(r.path){r.params={};for(var u in s)if(L(u,r.params,r.path))return a(s[u],r,n)}return a(null,r)}function n(t,n){var i=t.redirect,u="function"==typeof i?i(c(t,n)):i;if("string"==typeof u&&(u={path:u}),!u||"object"!=typeof u)return o(!1,"invalid redirect option: "+JSON.stringify(u)),a(null,n);var s=u,f=s.name,h=s.path,l=n.query,d=n.hash,y=n.params;if(l=s.hasOwnProperty("query")?s.query:l,d=s.hasOwnProperty("hash")?s.hash:d,y=s.hasOwnProperty("params")?s.params:y,f){var v=p[f];return r(v,'redirect failed: named route "'+f+'" not found.'),e({_normalized:!0,name:f,query:l,hash:d,params:y},void 0,n)}if(h){var m=B(h,t),g=V(m,y,'redirect route with path "'+m+'"');return e({_normalized:!0,path:g,query:l,hash:d},void 0,n)}return o(!1,"invalid redirect option: "+JSON.stringify(u)),a(null,n)}function i(t,n,r){var o=V(r,n.params,'aliased route with path "'+r+'"'),i=e({_normalized:!0,path:o});if(i){var u=i.matched,c=u[u.length-1];return n.params=i.params,a(c,n)}return a(null,n)}function a(t,e,r){return t&&t.redirect?n(t,r||e):t&&t.matchAs?i(t,e,t.matchAs):c(t,e,r)}var u=q(t),s=u.pathMap,p=u.nameMap;return e}function L(t,e,n){var r,o,i=bt[t];i?(r=i.keys,o=i.regexp):(r=[],o=dt(t,r),bt[t]={keys:r,regexp:o});var a=n.match(o);if(!a)return!1;if(!e)return!0;for(var u=1,c=a.length;u<c;++u){var s=r[u-1],p="string"==typeof a[u]?decodeURIComponent(a[u]):a[u];s&&(e[s.name]=p)}return!0}function V(t,e,n){try{var o=xt[t]||(xt[t]=dt.compile(t));return o(e||{},{pretty:!0})}catch(t){return r(!1,"missing param for "+n+": "+t.message),""}}function B(e,n){return t(e,n.parent?n.parent.path:"/",!0)}function H(t,e,n){var r=function(o){o>=t.length?n():t[o]?e(t[o],function(){r(o+1)}):r(o+1)};r(0)}function I(t){if(!t)if(kt){var e=document.querySelector("base");t=e?e.getAttribute("href"):"/"}else t="/";return"/"!==t.charAt(0)&&(t="/"+t),t.replace(/\/$/,"")}function M(t,e){var n,r=Math.max(t.length,e.length);for(n=0;n<r&&t[n]===e[n];n++);return{activated:e.slice(n),deactivated:t.slice(n)}}function z(t){return N(t,function(t,e){var n=t&&t.beforeRouteLeave;if(n)return function(){return n.apply(e,arguments)}}).reverse()}function F(t,e){return N(t,function(t,n,r,o){var i=t&&t.beforeRouteEnter;if(i)return function(t,n,a){return i(t,n,function(t){a(t),"function"==typeof t&&e.push(function(){t(r.instances[o])})})}})}function J(t){return N(t,function(t,e,n,r){if("function"==typeof t&&!t.options)return function(e,i,a){var u=function(t){n.components[r]=t,a()},c=function(t){o(!1,"Failed to resolve async component "+r+": "+t),a(!1)},s=t(u,c);s&&"function"==typeof s.then&&s.then(u,c)}})}function N(t,e){return Array.prototype.concat.apply([],t.map(function(t){return Object.keys(t.components).map(function(n){return e(t.components[n],t.instances[n],t,n)})}))}function D(t){t&&window.sessionStorage.setItem(t,JSON.stringify({x:window.pageXOffset,y:window.pageYOffset}))}function X(t){if(t)return JSON.parse(window.sessionStorage.getItem(t))}function Y(t){var e=document.documentElement.getBoundingClientRect(),n=t.getBoundingClientRect();return{x:n.left-e.left,y:n.top-e.top}}function W(t){return K(t.x)||K(t.y)}function G(t){return{x:K(t.x)?t.x:window.pageXOffset,y:K(t.y)?t.y:window.pageYOffset}}function K(t){return"number"==typeof t}function Q(t){var e=window.location.pathname;return t&&0===e.indexOf(t)&&(e=e.slice(t.length)),(e||"/")+window.location.search+window.location.hash}function Z(t,e){var n=window.history;try{e?n.replaceState({key:jt},"",t):(jt=Rt(),n.pushState({key:jt},"",t)),D(jt)}catch(n){window.location[e?"assign":"replace"](t)}}function tt(t){Z(t,!0)}function et(){var t=nt();return"/"===t.charAt(0)||(ot("/"+t),!1)}function nt(){var t=window.location.href,e=t.indexOf("#");return e===-1?"":t.slice(e+1)}function rt(t){window.location.hash=t}function ot(t){var e=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,e>=0?e:0)+"#"+t)}var it={name:"router-view",functional:!0,props:{name:{type:String,default:"default"}},render:function(t,e){var n=e.props,r=e.children,o=e.parent,i=e.data;i.routerView=!0;for(var a=o.$route,u=o._routerViewCache||(o._routerViewCache={}),c=0,s=!1;o;)o.$vnode&&o.$vnode.data.routerView&&c++,o._inactive&&(s=!0),o=o.$parent;i.routerViewDepth=c;var p=a.matched[c];if(!p)return t();var f=s?u[n.name]:u[n.name]=p.components[n.name];return s||((i.hook||(i.hook={})).init=function(t){p.instances[n.name]=t.child}),t(f,i,r)}},at=encodeURIComponent,ut=decodeURIComponent,ct=c(null,{path:"/"}),st=/\/$/,pt=[String,Object],ft={name:"router-link",props:{to:{type:pt,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String},render:function(t){var e=this,r=this.$router,o=this.$route,i=y(this.to,o,this.append),a=r.match(i),u=a.redirectedFrom||a.fullPath,s=r.history.base,p=s?n(s+u):u,h={},d=this.activeClass||r.options.linkActiveClass||"router-link-active",m=i.path?c(null,i):a;h[d]=this.exact?f(o,m):l(o,m);var g={click:function(t){t.preventDefault(),e.replace?r.replace(i):r.push(i)}},w={class:h};if("a"===this.tag)w.on=g,w.attrs={href:p};else{var b=v(this.$slots.default);if(b){var x=b.data||(b.data={});x.on=g;var k=x.attrs||(x.attrs={});k.href=p}}return t(this.tag,w,this.$slots.default)}},ht=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},lt=ht,dt=T,yt=g,vt=w,mt=k,gt=_,wt=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");dt.parse=yt,dt.compile=vt,dt.tokensToFunction=mt,dt.tokensToRegExp=gt;var bt=Object.create(null),xt=Object.create(null),kt="undefined"!=typeof window,Ot=kt&&function(){var t=window.navigator.userAgent;return(t.indexOf("Android 2.")===-1&&t.indexOf("Android 4.0")===-1||t.indexOf("Mobile Safari")===-1||t.indexOf("Chrome")!==-1||t.indexOf("Windows Phone")!==-1)&&(window.history&&"pushState"in window.history)}(),Et=function(t,e){this.router=t,this.base=I(e),this.current=ct,this.pending=null};Et.prototype.listen=function(t){this.cb=t},Et.prototype.transitionTo=function(t,e){var n=this,r=this.router.match(t,this.current);this.confirmTransition(r,function(){n.updateRoute(r),e&&e(r),n.ensureURL()})},Et.prototype.confirmTransition=function(t,e){var n=this,r=this.current;if(f(t,r))return void this.ensureURL();var o=M(this.current.matched,t.matched),i=o.deactivated,a=o.activated,u=[].concat(z(i),this.router.beforeHooks,a.map(function(t){return t.beforeEnter}),J(a));this.pending=t;var c=function(e,o){n.pending===t&&e(t,r,function(t){t===!1?n.ensureURL():"string"==typeof t||"object"==typeof t?n.push(t):o(t)})};H(u,c,function(){var r=[];H(F(a,r),c,function(){n.pending===t&&(n.pending=null,e(t),n.router.app.$nextTick(function(){r.forEach(function(t){return t()})}))})})},Et.prototype.updateRoute=function(t){var e=this.current;this.current=t,this.cb&&this.cb(t),this.router.afterHooks.forEach(function(n){n&&n(t,e)})};var Rt=function(){return String(Date.now())},jt=Rt(),St=function(t){function e(e,n){var r=this;t.call(this,e,n),this.transitionTo(Q(this.base));var o=e.options.scrollBehavior;window.addEventListener("popstate",function(t){jt=t.state&&t.state.key;var e=r.current;r.transitionTo(Q(r.base),function(t){o&&r.handleScroll(t,e,!0)})}),o&&window.addEventListener("scroll",function(){D(jt)})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.go=function(t){window.history.go(t)},e.prototype.push=function(t){var e=this,r=this.current;this.transitionTo(t,function(t){Z(n(e.base+t.fullPath)),e.handleScroll(t,r,!1)})},e.prototype.replace=function(t){var e=this,r=this.current;this.transitionTo(t,function(t){tt(n(e.base+t.fullPath)),e.handleScroll(t,r,!1)})},e.prototype.ensureURL=function(){Q(this.base)!==this.current.fullPath&&tt(n(this.base+this.current.fullPath))},e.prototype.handleScroll=function(t,e,n){var o=this.router;if(o.app){var i=o.options.scrollBehavior;i&&(r("function"==typeof i,"scrollBehavior must be a function"),o.app.$nextTick(function(){var r=X(jt),o=i(t,e,n?r:null);if(o){var a="object"==typeof o;if(a&&"string"==typeof o.selector){var u=document.querySelector(o.selector);u?r=Y(u):W(o)&&(r=G(o))}else a&&W(o)&&(r=G(o));r&&window.scrollTo(r.x,r.y)}}))}},e}(Et),$t=function(t){function e(e,n,r){var o=this;t.call(this,e,n),r&&this.checkFallback()||(et(),this.transitionTo(nt()),window.addEventListener("hashchange",function(){o.onHashChange()}))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.checkFallback=function(){var t=Q(this.base);if(!/^\/#/.test(t))return window.location.replace(n(this.base+"/#"+t)),!0},e.prototype.onHashChange=function(){et()&&this.transitionTo(nt(),function(t){ot(t.fullPath)})},e.prototype.push=function(e){t.prototype.transitionTo.call(this,e,function(t){rt(t.fullPath)})},e.prototype.replace=function(e){t.prototype.transitionTo.call(this,e,function(t){ot(t.fullPath)})},e.prototype.go=function(t){window.history.go(t)},e.prototype.ensureURL=function(){nt()!==this.current.fullPath&&ot(this.current.fullPath)},e}(Et),At=function(t){function e(e){t.call(this,e),this.stack=[],this.index=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(e){var n=this;t.prototype.transitionTo.call(this,e,function(t){n.stack=n.stack.slice(0,n.index+1).concat(t),n.index++})},e.prototype.replace=function(e){var n=this;t.prototype.transitionTo.call(this,e,function(t){n.stack=n.stack.slice(0,n.index).concat(t)})},e.prototype.go=function(t){var e=this,n=this.index+t;if(!(n<0||n>=this.stack.length)){var r=this.stack[n];this.confirmTransition(r,function(){e.index=n,e.updateRoute(r)})}},e.prototype.ensureURL=function(){},e}(Et),_t=function(t){void 0===t&&(t={}),this.app=null,this.options=t,this.beforeHooks=[],this.afterHooks=[],this.match=U(t.routes||[]);var e=t.mode||"hash";this.fallback="history"===e&&!Ot,this.fallback&&(e="hash"),kt||(e="abstract"),this.mode=e},Tt={currentRoute:{}};return Tt.currentRoute.get=function(){return this.history&&this.history.current},_t.prototype.init=function(t){var e=this;r(m.installed,"not installed. Make sure to call `Vue.use(VueRouter)` before creating root instance."),this.app=t;var n=this,o=n.mode,i=n.options,a=n.fallback;switch(o){case"history":this.history=new St(this,i.base);break;case"hash":this.history=new $t(this,i.base,a);break;case"abstract":this.history=new At(this);break;default:r(!1,"invalid mode: "+o)}this.history.listen(function(t){e.app._route=t})},_t.prototype.beforeEach=function(t){this.beforeHooks.push(t)},_t.prototype.afterEach=function(t){this.afterHooks.push(t)},_t.prototype.push=function(t){this.history.push(t)},_t.prototype.replace=function(t){this.history.replace(t)},_t.prototype.go=function(t){this.history.go(t)},_t.prototype.back=function(){this.go(-1)},_t.prototype.forward=function(){this.go(1)},_t.prototype.getMatchedComponents=function(){return this.currentRoute?[].concat.apply([],this.currentRoute.matched.map(function(t){return Object.keys(t.components).map(function(e){return t.components[e]})})):[]},Object.defineProperties(_t.prototype,Tt),_t.install=m,kt&&window.Vue&&window.Vue.use(_t),_t});
</script>
<script>
    /*!
     * socket.io-1.4.5.min.js
     */
    (function (f) {
        if (typeof exports === "object" && typeof module !== "undefined") {
            module.exports = f()
        } else if (typeof define === "function" && define.amd) {
            define([], f)
        } else {
            var g;
            if (typeof window !== "undefined") {
                g = window
            } else if (typeof global !== "undefined") {
                g = global
            } else if (typeof self !== "undefined") {
                g = self
            } else {
                g = this
            }
            g.io = f()
        }
    })(function () {
        var define, module, exports;
        return function e(t, n, r) {
            function s(o, u) {
                if (!n[o]) {
                    if (!t[o]) {
                        var a = typeof require == "function" && require;
                        if (!u && a)return a(o, !0);
                        if (i)return i(o, !0);
                        var f = new Error("Cannot find module '" + o + "'");
                        throw f.code = "MODULE_NOT_FOUND", f
                    }
                    var l = n[o] = {exports: {}};
                    t[o][0].call(l.exports, function (e) {
                        var n = t[o][1][e];
                        return s(n ? n : e)
                    }, l, l.exports, e, t, n, r)
                }
                return n[o].exports
            }

            var i = typeof require == "function" && require;
            for (var o = 0; o < r.length; o++)s(r[o]);
            return s
        }({
            1: [function (_dereq_, module, exports) {
                module.exports = _dereq_("./lib/")
            }, {"./lib/": 2}],
            2: [function (_dereq_, module, exports) {
                module.exports = _dereq_("./socket");
                module.exports.parser = _dereq_("engine.io-parser")
            }, {"./socket": 3, "engine.io-parser": 19}],
            3: [function (_dereq_, module, exports) {
                (function (global) {
                    var transports = _dereq_("./transports");
                    var Emitter = _dereq_("component-emitter");
                    var debug = _dereq_("debug")("engine.io-client:socket");
                    var index = _dereq_("indexof");
                    var parser = _dereq_("engine.io-parser");
                    var parseuri = _dereq_("parseuri");
                    var parsejson = _dereq_("parsejson");
                    var parseqs = _dereq_("parseqs");
                    module.exports = Socket;
                    function noop() {
                    }

                    function Socket(uri, opts) {
                        if (!(this instanceof Socket))return new Socket(uri, opts);
                        opts = opts || {};
                        if (uri && "object" == typeof uri) {
                            opts = uri;
                            uri = null
                        }
                        if (uri) {
                            uri = parseuri(uri);
                            opts.hostname = uri.host;
                            opts.secure = uri.protocol == "https" || uri.protocol == "wss";
                            opts.port = uri.port;
                            if (uri.query)opts.query = uri.query
                        } else if (opts.host) {
                            opts.hostname = parseuri(opts.host).host
                        }
                        this.secure = null != opts.secure ? opts.secure : global.location && "https:" == location.protocol;
                        if (opts.hostname && !opts.port) {
                            opts.port = this.secure ? "443" : "80"
                        }
                        this.agent = opts.agent || false;
                        this.hostname = opts.hostname || (global.location ? location.hostname : "localhost");
                        this.port = opts.port || (global.location && location.port ? location.port : this.secure ? 443 : 80);
                        this.query = opts.query || {};
                        if ("string" == typeof this.query)this.query = parseqs.decode(this.query);
                        this.upgrade = false !== opts.upgrade;
                        this.path = (opts.path || "/engine.io").replace(/\/$/, "") + "/";
                        this.forceJSONP = !!opts.forceJSONP;
                        this.jsonp = false !== opts.jsonp;
                        this.forceBase64 = !!opts.forceBase64;
                        this.enablesXDR = !!opts.enablesXDR;
                        this.timestampParam = opts.timestampParam || "t";
                        this.timestampRequests = opts.timestampRequests;
                        this.transports = opts.transports || ["polling", "websocket"];
                        this.readyState = "";
                        this.writeBuffer = [];
                        this.policyPort = opts.policyPort || 843;
                        this.rememberUpgrade = opts.rememberUpgrade || false;
                        this.binaryType = null;
                        this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
                        this.perMessageDeflate = false !== opts.perMessageDeflate ? opts.perMessageDeflate || {} : false;
                        if (true === this.perMessageDeflate)this.perMessageDeflate = {};
                        if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
                            this.perMessageDeflate.threshold = 1024
                        }
                        this.pfx = opts.pfx || null;
                        this.key = opts.key || null;
                        this.passphrase = opts.passphrase || null;
                        this.cert = opts.cert || null;
                        this.ca = opts.ca || null;
                        this.ciphers = opts.ciphers || null;
                        this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;
                        var freeGlobal = typeof global == "object" && global;
                        if (freeGlobal.global === freeGlobal) {
                            if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
                                this.extraHeaders = opts.extraHeaders
                            }
                        }
                        this.open()
                    }

                    Socket.priorWebsocketSuccess = false;
                    Emitter(Socket.prototype);
                    Socket.protocol = parser.protocol;
                    Socket.Socket = Socket;
                    Socket.Transport = _dereq_("./transport");
                    Socket.transports = _dereq_("./transports");
                    Socket.parser = _dereq_("engine.io-parser");
                    Socket.prototype.createTransport = function (name) {
                        debug('creating transport "%s"', name);
                        var query = clone(this.query);
                        query.EIO = parser.protocol;
                        query.transport = name;
                        if (this.id)query.sid = this.id;
                        var transport = new transports[name]({
                            agent: this.agent,
                            hostname: this.hostname,
                            port: this.port,
                            secure: this.secure,
                            path: this.path,
                            query: query,
                            forceJSONP: this.forceJSONP,
                            jsonp: this.jsonp,
                            forceBase64: this.forceBase64,
                            enablesXDR: this.enablesXDR,
                            timestampRequests: this.timestampRequests,
                            timestampParam: this.timestampParam,
                            policyPort: this.policyPort,
                            socket: this,
                            pfx: this.pfx,
                            key: this.key,
                            passphrase: this.passphrase,
                            cert: this.cert,
                            ca: this.ca,
                            ciphers: this.ciphers,
                            rejectUnauthorized: this.rejectUnauthorized,
                            perMessageDeflate: this.perMessageDeflate,
                            extraHeaders: this.extraHeaders
                        });
                        return transport
                    };
                    function clone(obj) {
                        var o = {};
                        for (var i in obj) {
                            if (obj.hasOwnProperty(i)) {
                                o[i] = obj[i]
                            }
                        }
                        return o
                    }

                    Socket.prototype.open = function () {
                        var transport;
                        if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") != -1) {
                            transport = "websocket"
                        } else if (0 === this.transports.length) {
                            var self = this;
                            setTimeout(function () {
                                self.emit("error", "No transports available")
                            }, 0);
                            return
                        } else {
                            transport = this.transports[0]
                        }
                        this.readyState = "opening";
                        try {
                            transport = this.createTransport(transport)
                        } catch (e) {
                            this.transports.shift();
                            this.open();
                            return
                        }
                        transport.open();
                        this.setTransport(transport)
                    };
                    Socket.prototype.setTransport = function (transport) {
                        debug("setting transport %s", transport.name);
                        var self = this;
                        if (this.transport) {
                            debug("clearing existing transport %s", this.transport.name);
                            this.transport.removeAllListeners()
                        }
                        this.transport = transport;
                        transport.on("drain", function () {
                            self.onDrain()
                        }).on("packet", function (packet) {
                            self.onPacket(packet)
                        }).on("error", function (e) {
                            self.onError(e)
                        }).on("close", function () {
                            self.onClose("transport close")
                        })
                    };
                    Socket.prototype.probe = function (name) {
                        debug('probing transport "%s"', name);
                        var transport = this.createTransport(name, {probe: 1}), failed = false, self = this;
                        Socket.priorWebsocketSuccess = false;
                        function onTransportOpen() {
                            if (self.onlyBinaryUpgrades) {
                                var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
                                failed = failed || upgradeLosesBinary
                            }
                            if (failed)return;
                            debug('probe transport "%s" opened', name);
                            transport.send([{type: "ping", data: "probe"}]);
                            transport.once("packet", function (msg) {
                                if (failed)return;
                                if ("pong" == msg.type && "probe" == msg.data) {
                                    debug('probe transport "%s" pong', name);
                                    self.upgrading = true;
                                    self.emit("upgrading", transport);
                                    if (!transport)return;
                                    Socket.priorWebsocketSuccess = "websocket" == transport.name;
                                    debug('pausing current transport "%s"', self.transport.name);
                                    self.transport.pause(function () {
                                        if (failed)return;
                                        if ("closed" == self.readyState)return;
                                        debug("changing transport and sending upgrade packet");
                                        cleanup();
                                        self.setTransport(transport);
                                        transport.send([{type: "upgrade"}]);
                                        self.emit("upgrade", transport);
                                        transport = null;
                                        self.upgrading = false;
                                        self.flush()
                                    })
                                } else {
                                    debug('probe transport "%s" failed', name);
                                    var err = new Error("probe error");
                                    err.transport = transport.name;
                                    self.emit("upgradeError", err)
                                }
                            })
                        }

                        function freezeTransport() {
                            if (failed)return;
                            failed = true;
                            cleanup();
                            transport.close();
                            transport = null
                        }

                        function onerror(err) {
                            var error = new Error("probe error: " + err);
                            error.transport = transport.name;
                            freezeTransport();
                            debug('probe transport "%s" failed because of error: %s', name, err);
                            self.emit("upgradeError", error)
                        }

                        function onTransportClose() {
                            onerror("transport closed")
                        }

                        function onclose() {
                            onerror("socket closed")
                        }

                        function onupgrade(to) {
                            if (transport && to.name != transport.name) {
                                debug('"%s" works - aborting "%s"', to.name, transport.name);
                                freezeTransport()
                            }
                        }

                        function cleanup() {
                            transport.removeListener("open", onTransportOpen);
                            transport.removeListener("error", onerror);
                            transport.removeListener("close", onTransportClose);
                            self.removeListener("close", onclose);
                            self.removeListener("upgrading", onupgrade)
                        }

                        transport.once("open", onTransportOpen);
                        transport.once("error", onerror);
                        transport.once("close", onTransportClose);
                        this.once("close", onclose);
                        this.once("upgrading", onupgrade);
                        transport.open()
                    };
                    Socket.prototype.onOpen = function () {
                        debug("socket open");
                        this.readyState = "open";
                        Socket.priorWebsocketSuccess = "websocket" == this.transport.name;
                        this.emit("open");
                        this.flush();
                        if ("open" == this.readyState && this.upgrade && this.transport.pause) {
                            debug("starting upgrade probes");
                            for (var i = 0, l = this.upgrades.length; i < l; i++) {
                                this.probe(this.upgrades[i])
                            }
                        }
                    };
                    Socket.prototype.onPacket = function (packet) {
                        if ("opening" == this.readyState || "open" == this.readyState) {
                            debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
                            this.emit("packet", packet);
                            this.emit("heartbeat");
                            switch (packet.type) {
                                case"open":
                                    this.onHandshake(parsejson(packet.data));
                                    break;
                                case"pong":
                                    this.setPing();
                                    this.emit("pong");
                                    break;
                                case"error":
                                    var err = new Error("server error");
                                    err.code = packet.data;
                                    this.onError(err);
                                    break;
                                case"message":
                                    this.emit("data", packet.data);
                                    this.emit("message", packet.data);
                                    break
                            }
                        } else {
                            debug('packet received with socket readyState "%s"', this.readyState)
                        }
                    };
                    Socket.prototype.onHandshake = function (data) {
                        this.emit("handshake", data);
                        this.id = data.sid;
                        this.transport.query.sid = data.sid;
                        this.upgrades = this.filterUpgrades(data.upgrades);
                        this.pingInterval = data.pingInterval;
                        this.pingTimeout = data.pingTimeout;
                        this.onOpen();
                        if ("closed" == this.readyState)return;
                        this.setPing();
                        this.removeListener("heartbeat", this.onHeartbeat);
                        this.on("heartbeat", this.onHeartbeat)
                    };
                    Socket.prototype.onHeartbeat = function (timeout) {
                        clearTimeout(this.pingTimeoutTimer);
                        var self = this;
                        self.pingTimeoutTimer = setTimeout(function () {
                            if ("closed" == self.readyState)return;
                            self.onClose("ping timeout")
                        }, timeout || self.pingInterval + self.pingTimeout)
                    };
                    Socket.prototype.setPing = function () {
                        var self = this;
                        clearTimeout(self.pingIntervalTimer);
                        self.pingIntervalTimer = setTimeout(function () {
                            debug("writing ping packet - expecting pong within %sms", self.pingTimeout);
                            self.ping();
                            self.onHeartbeat(self.pingTimeout)
                        }, self.pingInterval)
                    };
                    Socket.prototype.ping = function () {
                        var self = this;
                        this.sendPacket("ping", function () {
                            self.emit("ping")
                        })
                    };
                    Socket.prototype.onDrain = function () {
                        this.writeBuffer.splice(0, this.prevBufferLen);
                        this.prevBufferLen = 0;
                        if (0 === this.writeBuffer.length) {
                            this.emit("drain")
                        } else {
                            this.flush()
                        }
                    };
                    Socket.prototype.flush = function () {
                        if ("closed" != this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
                            debug("flushing %d packets in socket", this.writeBuffer.length);
                            this.transport.send(this.writeBuffer);
                            this.prevBufferLen = this.writeBuffer.length;
                            this.emit("flush")
                        }
                    };
                    Socket.prototype.write = Socket.prototype.send = function (msg, options, fn) {
                        this.sendPacket("message", msg, options, fn);
                        return this
                    };
                    Socket.prototype.sendPacket = function (type, data, options, fn) {
                        if ("function" == typeof data) {
                            fn = data;
                            data = undefined
                        }
                        if ("function" == typeof options) {
                            fn = options;
                            options = null
                        }
                        if ("closing" == this.readyState || "closed" == this.readyState) {
                            return
                        }
                        options = options || {};
                        options.compress = false !== options.compress;
                        var packet = {type: type, data: data, options: options};
                        this.emit("packetCreate", packet);
                        this.writeBuffer.push(packet);
                        if (fn)this.once("flush", fn);
                        this.flush()
                    };
                    Socket.prototype.close = function () {
                        if ("opening" == this.readyState || "open" == this.readyState) {
                            this.readyState = "closing";
                            var self = this;
                            if (this.writeBuffer.length) {
                                this.once("drain", function () {
                                    if (this.upgrading) {
                                        waitForUpgrade()
                                    } else {
                                        close()
                                    }
                                })
                            } else if (this.upgrading) {
                                waitForUpgrade()
                            } else {
                                close()
                            }
                        }
                        function close() {
                            self.onClose("forced close");
                            debug("socket closing - telling transport to close");
                            self.transport.close()
                        }

                        function cleanupAndClose() {
                            self.removeListener("upgrade", cleanupAndClose);
                            self.removeListener("upgradeError", cleanupAndClose);
                            close()
                        }

                        function waitForUpgrade() {
                            self.once("upgrade", cleanupAndClose);
                            self.once("upgradeError", cleanupAndClose)
                        }

                        return this
                    };
                    Socket.prototype.onError = function (err) {
                        debug("socket error %j", err);
                        Socket.priorWebsocketSuccess = false;
                        this.emit("error", err);
                        this.onClose("transport error", err)
                    };
                    Socket.prototype.onClose = function (reason, desc) {
                        if ("opening" == this.readyState || "open" == this.readyState || "closing" == this.readyState) {
                            debug('socket close with reason: "%s"', reason);
                            var self = this;
                            clearTimeout(this.pingIntervalTimer);
                            clearTimeout(this.pingTimeoutTimer);
                            this.transport.removeAllListeners("close");
                            this.transport.close();
                            this.transport.removeAllListeners();
                            this.readyState = "closed";
                            this.id = null;
                            this.emit("close", reason, desc);
                            self.writeBuffer = [];
                            self.prevBufferLen = 0
                        }
                    };
                    Socket.prototype.filterUpgrades = function (upgrades) {
                        var filteredUpgrades = [];
                        for (var i = 0, j = upgrades.length; i < j; i++) {
                            if (~index(this.transports, upgrades[i]))filteredUpgrades.push(upgrades[i])
                        }
                        return filteredUpgrades
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {
                "./transport": 4,
                "./transports": 5,
                "component-emitter": 15,
                debug: 17,
                "engine.io-parser": 19,
                indexof: 23,
                parsejson: 26,
                parseqs: 27,
                parseuri: 28
            }],
            4: [function (_dereq_, module, exports) {
                var parser = _dereq_("engine.io-parser");
                var Emitter = _dereq_("component-emitter");
                module.exports = Transport;
                function Transport(opts) {
                    this.path = opts.path;
                    this.hostname = opts.hostname;
                    this.port = opts.port;
                    this.secure = opts.secure;
                    this.query = opts.query;
                    this.timestampParam = opts.timestampParam;
                    this.timestampRequests = opts.timestampRequests;
                    this.readyState = "";
                    this.agent = opts.agent || false;
                    this.socket = opts.socket;
                    this.enablesXDR = opts.enablesXDR;
                    this.pfx = opts.pfx;
                    this.key = opts.key;
                    this.passphrase = opts.passphrase;
                    this.cert = opts.cert;
                    this.ca = opts.ca;
                    this.ciphers = opts.ciphers;
                    this.rejectUnauthorized = opts.rejectUnauthorized;
                    this.extraHeaders = opts.extraHeaders
                }

                Emitter(Transport.prototype);
                Transport.prototype.onError = function (msg, desc) {
                    var err = new Error(msg);
                    err.type = "TransportError";
                    err.description = desc;
                    this.emit("error", err);
                    return this
                };
                Transport.prototype.open = function () {
                    if ("closed" == this.readyState || "" == this.readyState) {
                        this.readyState = "opening";
                        this.doOpen()
                    }
                    return this
                };
                Transport.prototype.close = function () {
                    if ("opening" == this.readyState || "open" == this.readyState) {
                        this.doClose();
                        this.onClose()
                    }
                    return this
                };
                Transport.prototype.send = function (packets) {
                    if ("open" == this.readyState) {
                        this.write(packets)
                    } else {
                        throw new Error("Transport not open")
                    }
                };
                Transport.prototype.onOpen = function () {
                    this.readyState = "open";
                    this.writable = true;
                    this.emit("open")
                };
                Transport.prototype.onData = function (data) {
                    var packet = parser.decodePacket(data, this.socket.binaryType);
                    this.onPacket(packet)
                };
                Transport.prototype.onPacket = function (packet) {
                    this.emit("packet", packet)
                };
                Transport.prototype.onClose = function () {
                    this.readyState = "closed";
                    this.emit("close")
                }
            }, {"component-emitter": 15, "engine.io-parser": 19}],
            5: [function (_dereq_, module, exports) {
                (function (global) {
                    var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");
                    var XHR = _dereq_("./polling-xhr");
                    var JSONP = _dereq_("./polling-jsonp");
                    var websocket = _dereq_("./websocket");
                    exports.polling = polling;
                    exports.websocket = websocket;
                    function polling(opts) {
                        var xhr;
                        var xd = false;
                        var xs = false;
                        var jsonp = false !== opts.jsonp;
                        if (global.location) {
                            var isSSL = "https:" == location.protocol;
                            var port = location.port;
                            if (!port) {
                                port = isSSL ? 443 : 80
                            }
                            xd = opts.hostname != location.hostname || port != opts.port;
                            xs = opts.secure != isSSL
                        }
                        opts.xdomain = xd;
                        opts.xscheme = xs;
                        xhr = new XMLHttpRequest(opts);
                        if ("open" in xhr && !opts.forceJSONP) {
                            return new XHR(opts)
                        } else {
                            if (!jsonp)throw new Error("JSONP disabled");
                            return new JSONP(opts)
                        }
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {"./polling-jsonp": 6, "./polling-xhr": 7, "./websocket": 9, "xmlhttprequest-ssl": 10}],
            6: [function (_dereq_, module, exports) {
                (function (global) {
                    var Polling = _dereq_("./polling");
                    var inherit = _dereq_("component-inherit");
                    module.exports = JSONPPolling;
                    var rNewline = /\n/g;
                    var rEscapedNewline = /\\n/g;
                    var callbacks;
                    var index = 0;

                    function empty() {
                    }

                    function JSONPPolling(opts) {
                        Polling.call(this, opts);
                        this.query = this.query || {};
                        if (!callbacks) {
                            if (!global.___eio)global.___eio = [];
                            callbacks = global.___eio
                        }
                        this.index = callbacks.length;
                        var self = this;
                        callbacks.push(function (msg) {
                            self.onData(msg)
                        });
                        this.query.j = this.index;
                        if (global.document && global.addEventListener) {
                            global.addEventListener("beforeunload", function () {
                                if (self.script)self.script.onerror = empty
                            }, false)
                        }
                    }

                    inherit(JSONPPolling, Polling);
                    JSONPPolling.prototype.supportsBinary = false;
                    JSONPPolling.prototype.doClose = function () {
                        if (this.script) {
                            this.script.parentNode.removeChild(this.script);
                            this.script = null
                        }
                        if (this.form) {
                            this.form.parentNode.removeChild(this.form);
                            this.form = null;
                            this.iframe = null
                        }
                        Polling.prototype.doClose.call(this)
                    };
                    JSONPPolling.prototype.doPoll = function () {
                        var self = this;
                        var script = document.createElement("script");
                        if (this.script) {
                            this.script.parentNode.removeChild(this.script);
                            this.script = null
                        }
                        script.async = true;
                        script.src = this.uri();
                        script.onerror = function (e) {
                            self.onError("jsonp poll error", e)
                        };
                        var insertAt = document.getElementsByTagName("script")[0];
                        if (insertAt) {
                            insertAt.parentNode.insertBefore(script, insertAt)
                        } else {
                            (document.head || document.body).appendChild(script)
                        }
                        this.script = script;
                        var isUAgecko = "undefined" != typeof navigator && /gecko/i.test(navigator.userAgent);
                        if (isUAgecko) {
                            setTimeout(function () {
                                var iframe = document.createElement("iframe");
                                document.body.appendChild(iframe);
                                document.body.removeChild(iframe)
                            }, 100)
                        }
                    };
                    JSONPPolling.prototype.doWrite = function (data, fn) {
                        var self = this;
                        if (!this.form) {
                            var form = document.createElement("form");
                            var area = document.createElement("textarea");
                            var id = this.iframeId = "eio_iframe_" + this.index;
                            var iframe;
                            form.className = "socketio";
                            form.style.position = "absolute";
                            form.style.top = "-1000px";
                            form.style.left = "-1000px";
                            form.target = id;
                            form.method = "POST";
                            form.setAttribute("accept-charset", "utf-8");
                            area.name = "d";
                            form.appendChild(area);
                            document.body.appendChild(form);
                            this.form = form;
                            this.area = area
                        }
                        this.form.action = this.uri();
                        function complete() {
                            initIframe();
                            fn()
                        }

                        function initIframe() {
                            if (self.iframe) {
                                try {
                                    self.form.removeChild(self.iframe)
                                } catch (e) {
                                    self.onError("jsonp polling iframe removal error", e)
                                }
                            }
                            try {
                                var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
                                iframe = document.createElement(html)
                            } catch (e) {
                                iframe = document.createElement("iframe");
                                iframe.name = self.iframeId;
                                iframe.src = "javascript:0"
                            }
                            iframe.id = self.iframeId;
                            self.form.appendChild(iframe);
                            self.iframe = iframe
                        }

                        initIframe();
                        data = data.replace(rEscapedNewline, "\\\n");
                        this.area.value = data.replace(rNewline, "\\n");
                        try {
                            this.form.submit()
                        } catch (e) {
                        }
                        if (this.iframe.attachEvent) {
                            this.iframe.onreadystatechange = function () {
                                if (self.iframe.readyState == "complete") {
                                    complete()
                                }
                            }
                        } else {
                            this.iframe.onload = complete
                        }
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {"./polling": 8, "component-inherit": 16}],
            7: [function (_dereq_, module, exports) {
                (function (global) {
                    var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");
                    var Polling = _dereq_("./polling");
                    var Emitter = _dereq_("component-emitter");
                    var inherit = _dereq_("component-inherit");
                    var debug = _dereq_("debug")("engine.io-client:polling-xhr");
                    module.exports = XHR;
                    module.exports.Request = Request;
                    function empty() {
                    }

                    function XHR(opts) {
                        Polling.call(this, opts);
                        if (global.location) {
                            var isSSL = "https:" == location.protocol;
                            var port = location.port;
                            if (!port) {
                                port = isSSL ? 443 : 80
                            }
                            this.xd = opts.hostname != global.location.hostname || port != opts.port;
                            this.xs = opts.secure != isSSL
                        } else {
                            this.extraHeaders = opts.extraHeaders
                        }
                    }

                    inherit(XHR, Polling);
                    XHR.prototype.supportsBinary = true;
                    XHR.prototype.request = function (opts) {
                        opts = opts || {};
                        opts.uri = this.uri();
                        opts.xd = this.xd;
                        opts.xs = this.xs;
                        opts.agent = this.agent || false;
                        opts.supportsBinary = this.supportsBinary;
                        opts.enablesXDR = this.enablesXDR;
                        opts.pfx = this.pfx;
                        opts.key = this.key;
                        opts.passphrase = this.passphrase;
                        opts.cert = this.cert;
                        opts.ca = this.ca;
                        opts.ciphers = this.ciphers;
                        opts.rejectUnauthorized = this.rejectUnauthorized;
                        opts.extraHeaders = this.extraHeaders;
                        return new Request(opts)
                    };
                    XHR.prototype.doWrite = function (data, fn) {
                        var isBinary = typeof data !== "string" && data !== undefined;
                        var req = this.request({method: "POST", data: data, isBinary: isBinary});
                        var self = this;
                        req.on("success", fn);
                        req.on("error", function (err) {
                            self.onError("xhr post error", err)
                        });
                        this.sendXhr = req
                    };
                    XHR.prototype.doPoll = function () {
                        debug("xhr poll");
                        var req = this.request();
                        var self = this;
                        req.on("data", function (data) {
                            self.onData(data)
                        });
                        req.on("error", function (err) {
                            self.onError("xhr poll error", err)
                        });
                        this.pollXhr = req
                    };
                    function Request(opts) {
                        this.method = opts.method || "GET";
                        this.uri = opts.uri;
                        this.xd = !!opts.xd;
                        this.xs = !!opts.xs;
                        this.async = false !== opts.async;
                        this.data = undefined != opts.data ? opts.data : null;
                        this.agent = opts.agent;
                        this.isBinary = opts.isBinary;
                        this.supportsBinary = opts.supportsBinary;
                        this.enablesXDR = opts.enablesXDR;
                        this.pfx = opts.pfx;
                        this.key = opts.key;
                        this.passphrase = opts.passphrase;
                        this.cert = opts.cert;
                        this.ca = opts.ca;
                        this.ciphers = opts.ciphers;
                        this.rejectUnauthorized = opts.rejectUnauthorized;
                        this.extraHeaders = opts.extraHeaders;
                        this.create()
                    }

                    Emitter(Request.prototype);
                    Request.prototype.create = function () {
                        var opts = {agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR};
                        opts.pfx = this.pfx;
                        opts.key = this.key;
                        opts.passphrase = this.passphrase;
                        opts.cert = this.cert;
                        opts.ca = this.ca;
                        opts.ciphers = this.ciphers;
                        opts.rejectUnauthorized = this.rejectUnauthorized;
                        var xhr = this.xhr = new XMLHttpRequest(opts);
                        var self = this;
                        try {
                            debug("xhr open %s: %s", this.method, this.uri);
                            xhr.open(this.method, this.uri, this.async);
                            try {
                                if (this.extraHeaders) {
                                    xhr.setDisableHeaderCheck(true);
                                    for (var i in this.extraHeaders) {
                                        if (this.extraHeaders.hasOwnProperty(i)) {
                                            xhr.setRequestHeader(i, this.extraHeaders[i])
                                        }
                                    }
                                }
                            } catch (e) {
                            }
                            if (this.supportsBinary) {
                                xhr.responseType = "arraybuffer"
                            }
                            if ("POST" == this.method) {
                                try {
                                    if (this.isBinary) {
                                        xhr.setRequestHeader("Content-type", "application/octet-stream")
                                    } else {
                                        xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8")
                                    }
                                } catch (e) {
                                }
                            }
                            if ("withCredentials" in xhr) {
                                xhr.withCredentials = true
                            }
                            if (this.hasXDR()) {
                                xhr.onload = function () {
                                    self.onLoad()
                                };
                                xhr.onerror = function () {
                                    self.onError(xhr.responseText)
                                }
                            } else {
                                xhr.onreadystatechange = function () {
                                    if (4 != xhr.readyState)return;
                                    if (200 == xhr.status || 1223 == xhr.status) {
                                        self.onLoad()
                                    } else {
                                        setTimeout(function () {
                                            self.onError(xhr.status)
                                        }, 0)
                                    }
                                }
                            }
                            debug("xhr data %s", this.data);
                            xhr.send(this.data)
                        } catch (e) {
                            setTimeout(function () {
                                self.onError(e)
                            }, 0);
                            return
                        }
                        if (global.document) {
                            this.index = Request.requestsCount++;
                            Request.requests[this.index] = this
                        }
                    };
                    Request.prototype.onSuccess = function () {
                        this.emit("success");
                        this.cleanup()
                    };
                    Request.prototype.onData = function (data) {
                        this.emit("data", data);
                        this.onSuccess()
                    };
                    Request.prototype.onError = function (err) {
                        this.emit("error", err);
                        this.cleanup(true)
                    };
                    Request.prototype.cleanup = function (fromError) {
                        if ("undefined" == typeof this.xhr || null === this.xhr) {
                            return
                        }
                        if (this.hasXDR()) {
                            this.xhr.onload = this.xhr.onerror = empty
                        } else {
                            this.xhr.onreadystatechange = empty
                        }
                        if (fromError) {
                            try {
                                this.xhr.abort()
                            } catch (e) {
                            }
                        }
                        if (global.document) {
                            delete Request.requests[this.index]
                        }
                        this.xhr = null
                    };
                    Request.prototype.onLoad = function () {
                        var data;
                        try {
                            var contentType;
                            try {
                                contentType = this.xhr.getResponseHeader("Content-Type").split(";")[0]
                            } catch (e) {
                            }
                            if (contentType === "application/octet-stream") {
                                data = this.xhr.response
                            } else {
                                if (!this.supportsBinary) {
                                    data = this.xhr.responseText
                                } else {
                                    try {
                                        data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response))
                                    } catch (e) {
                                        var ui8Arr = new Uint8Array(this.xhr.response);
                                        var dataArray = [];
                                        for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
                                            dataArray.push(ui8Arr[idx])
                                        }
                                        data = String.fromCharCode.apply(null, dataArray)
                                    }
                                }
                            }
                        } catch (e) {
                            this.onError(e)
                        }
                        if (null != data) {
                            this.onData(data)
                        }
                    };
                    Request.prototype.hasXDR = function () {
                        return "undefined" !== typeof global.XDomainRequest && !this.xs && this.enablesXDR
                    };
                    Request.prototype.abort = function () {
                        this.cleanup()
                    };
                    if (global.document) {
                        Request.requestsCount = 0;
                        Request.requests = {};
                        if (global.attachEvent) {
                            global.attachEvent("onunload", unloadHandler)
                        } else if (global.addEventListener) {
                            global.addEventListener("beforeunload", unloadHandler, false)
                        }
                    }
                    function unloadHandler() {
                        for (var i in Request.requests) {
                            if (Request.requests.hasOwnProperty(i)) {
                                Request.requests[i].abort()
                            }
                        }
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {"./polling": 8, "component-emitter": 15, "component-inherit": 16, debug: 17, "xmlhttprequest-ssl": 10}],
            8: [function (_dereq_, module, exports) {
                var Transport = _dereq_("../transport");
                var parseqs = _dereq_("parseqs");
                var parser = _dereq_("engine.io-parser");
                var inherit = _dereq_("component-inherit");
                var yeast = _dereq_("yeast");
                var debug = _dereq_("debug")("engine.io-client:polling");
                module.exports = Polling;
                var hasXHR2 = function () {
                    var XMLHttpRequest = _dereq_("xmlhttprequest-ssl");
                    var xhr = new XMLHttpRequest({xdomain: false});
                    return null != xhr.responseType
                }();

                function Polling(opts) {
                    var forceBase64 = opts && opts.forceBase64;
                    if (!hasXHR2 || forceBase64) {
                        this.supportsBinary = false
                    }
                    Transport.call(this, opts)
                }

                inherit(Polling, Transport);
                Polling.prototype.name = "polling";
                Polling.prototype.doOpen = function () {
                    this.poll()
                };
                Polling.prototype.pause = function (onPause) {
                    var pending = 0;
                    var self = this;
                    this.readyState = "pausing";
                    function pause() {
                        debug("paused");
                        self.readyState = "paused";
                        onPause()
                    }

                    if (this.polling || !this.writable) {
                        var total = 0;
                        if (this.polling) {
                            debug("we are currently polling - waiting to pause");
                            total++;
                            this.once("pollComplete", function () {
                                debug("pre-pause polling complete");
                                --total || pause()
                            })
                        }
                        if (!this.writable) {
                            debug("we are currently writing - waiting to pause");
                            total++;
                            this.once("drain", function () {
                                debug("pre-pause writing complete");
                                --total || pause()
                            })
                        }
                    } else {
                        pause()
                    }
                };
                Polling.prototype.poll = function () {
                    debug("polling");
                    this.polling = true;
                    this.doPoll();
                    this.emit("poll")
                };
                Polling.prototype.onData = function (data) {
                    var self = this;
                    debug("polling got data %s", data);
                    var callback = function (packet, index, total) {
                        if ("opening" == self.readyState) {
                            self.onOpen()
                        }
                        if ("close" == packet.type) {
                            self.onClose();
                            return false
                        }
                        self.onPacket(packet)
                    };
                    parser.decodePayload(data, this.socket.binaryType, callback);
                    if ("closed" != this.readyState) {
                        this.polling = false;
                        this.emit("pollComplete");
                        if ("open" == this.readyState) {
                            this.poll()
                        } else {
                            debug('ignoring poll - transport state "%s"', this.readyState)
                        }
                    }
                };
                Polling.prototype.doClose = function () {
                    var self = this;

                    function close() {
                        debug("writing close packet");
                        self.write([{type: "close"}])
                    }

                    if ("open" == this.readyState) {
                        debug("transport open - closing");
                        close()
                    } else {
                        debug("transport not open - deferring close");
                        this.once("open", close)
                    }
                };
                Polling.prototype.write = function (packets) {
                    var self = this;
                    this.writable = false;
                    var callbackfn = function () {
                        self.writable = true;
                        self.emit("drain")
                    };
                    var self = this;
                    parser.encodePayload(packets, this.supportsBinary, function (data) {
                        self.doWrite(data, callbackfn)
                    })
                };
                Polling.prototype.uri = function () {
                    var query = this.query || {};
                    var schema = this.secure ? "https" : "http";
                    var port = "";
                    if (false !== this.timestampRequests) {
                        query[this.timestampParam] = yeast()
                    }
                    if (!this.supportsBinary && !query.sid) {
                        query.b64 = 1
                    }
                    query = parseqs.encode(query);
                    if (this.port && ("https" == schema && this.port != 443 || "http" == schema && this.port != 80)) {
                        port = ":" + this.port
                    }
                    if (query.length) {
                        query = "?" + query
                    }
                    var ipv6 = this.hostname.indexOf(":") !== -1;
                    return schema + "://" + (ipv6 ? "[" + this.hostname + "]" : this.hostname) + port + this.path + query
                }
            }, {
                "../transport": 4,
                "component-inherit": 16,
                debug: 17,
                "engine.io-parser": 19,
                parseqs: 27,
                "xmlhttprequest-ssl": 10,
                yeast: 30
            }],
            9: [function (_dereq_, module, exports) {
                (function (global) {
                    var Transport = _dereq_("../transport");
                    var parser = _dereq_("engine.io-parser");
                    var parseqs = _dereq_("parseqs");
                    var inherit = _dereq_("component-inherit");
                    var yeast = _dereq_("yeast");
                    var debug = _dereq_("debug")("engine.io-client:websocket");
                    var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
                    var WebSocket = BrowserWebSocket;
                    if (!WebSocket && typeof window === "undefined") {
                        try {
                            WebSocket = _dereq_("ws")
                        } catch (e) {
                        }
                    }
                    module.exports = WS;
                    function WS(opts) {
                        var forceBase64 = opts && opts.forceBase64;
                        if (forceBase64) {
                            this.supportsBinary = false
                        }
                        this.perMessageDeflate = opts.perMessageDeflate;
                        Transport.call(this, opts)
                    }

                    inherit(WS, Transport);
                    WS.prototype.name = "websocket";
                    WS.prototype.supportsBinary = true;
                    WS.prototype.doOpen = function () {
                        if (!this.check()) {
                            return
                        }
                        var self = this;
                        var uri = this.uri();
                        var protocols = void 0;
                        var opts = {agent: this.agent, perMessageDeflate: this.perMessageDeflate};
                        opts.pfx = this.pfx;
                        opts.key = this.key;
                        opts.passphrase = this.passphrase;
                        opts.cert = this.cert;
                        opts.ca = this.ca;
                        opts.ciphers = this.ciphers;
                        opts.rejectUnauthorized = this.rejectUnauthorized;
                        if (this.extraHeaders) {
                            opts.headers = this.extraHeaders
                        }
                        this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
                        if (this.ws.binaryType === undefined) {
                            this.supportsBinary = false
                        }
                        if (this.ws.supports && this.ws.supports.binary) {
                            this.supportsBinary = true;
                            this.ws.binaryType = "buffer"
                        } else {
                            this.ws.binaryType = "arraybuffer"
                        }
                        this.addEventListeners()
                    };
                    WS.prototype.addEventListeners = function () {
                        var self = this;
                        this.ws.onopen = function () {
                            self.onOpen()
                        };
                        this.ws.onclose = function () {
                            self.onClose()
                        };
                        this.ws.onmessage = function (ev) {
                            self.onData(ev.data)
                        };
                        this.ws.onerror = function (e) {
                            self.onError("websocket error", e)
                        }
                    };
                    if ("undefined" != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
                        WS.prototype.onData = function (data) {
                            var self = this;
                            setTimeout(function () {
                                Transport.prototype.onData.call(self, data)
                            }, 0)
                        }
                    }
                    WS.prototype.write = function (packets) {
                        var self = this;
                        this.writable = false;
                        var total = packets.length;
                        for (var i = 0, l = total; i < l; i++) {
                            (function (packet) {
                                parser.encodePacket(packet, self.supportsBinary, function (data) {
                                    if (!BrowserWebSocket) {
                                        var opts = {};
                                        if (packet.options) {
                                            opts.compress = packet.options.compress
                                        }
                                        if (self.perMessageDeflate) {
                                            var len = "string" == typeof data ? global.Buffer.byteLength(data) : data.length;
                                            if (len < self.perMessageDeflate.threshold) {
                                                opts.compress = false
                                            }
                                        }
                                    }
                                    try {
                                        if (BrowserWebSocket) {
                                            self.ws.send(data)
                                        } else {
                                            self.ws.send(data, opts)
                                        }
                                    } catch (e) {
                                        debug("websocket closed before onclose event")
                                    }
                                    --total || done()
                                })
                            })(packets[i])
                        }
                        function done() {
                            self.emit("flush");
                            setTimeout(function () {
                                self.writable = true;
                                self.emit("drain")
                            }, 0)
                        }
                    };
                    WS.prototype.onClose = function () {
                        Transport.prototype.onClose.call(this)
                    };
                    WS.prototype.doClose = function () {
                        if (typeof this.ws !== "undefined") {
                            this.ws.close()
                        }
                    };
                    WS.prototype.uri = function () {
                        var query = this.query || {};
                        var schema = this.secure ? "wss" : "ws";
                        var port = "";
                        if (this.port && ("wss" == schema && this.port != 443 || "ws" == schema && this.port != 80)) {
                            port = ":" + this.port
                        }
                        if (this.timestampRequests) {
                            query[this.timestampParam] = yeast()
                        }
                        if (!this.supportsBinary) {
                            query.b64 = 1
                        }
                        query = parseqs.encode(query);
                        if (query.length) {
                            query = "?" + query
                        }
                        var ipv6 = this.hostname.indexOf(":") !== -1;
                        return schema + "://" + (ipv6 ? "[" + this.hostname + "]" : this.hostname) + port + this.path + query
                    };
                    WS.prototype.check = function () {
                        return !!WebSocket && !("__initialize" in WebSocket && this.name === WS.prototype.name)
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {
                "../transport": 4,
                "component-inherit": 16,
                debug: 17,
                "engine.io-parser": 19,
                parseqs: 27,
                ws: undefined,
                yeast: 30
            }],
            10: [function (_dereq_, module, exports) {
                var hasCORS = _dereq_("has-cors");
                module.exports = function (opts) {
                    var xdomain = opts.xdomain;
                    var xscheme = opts.xscheme;
                    var enablesXDR = opts.enablesXDR;
                    try {
                        if ("undefined" != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
                            return new XMLHttpRequest
                        }
                    } catch (e) {
                    }
                    try {
                        if ("undefined" != typeof XDomainRequest && !xscheme && enablesXDR) {
                            return new XDomainRequest
                        }
                    } catch (e) {
                    }
                    if (!xdomain) {
                        try {
                            return new ActiveXObject("Microsoft.XMLHTTP")
                        } catch (e) {
                        }
                    }
                }
            }, {"has-cors": 22}],
            11: [function (_dereq_, module, exports) {
                module.exports = after;
                function after(count, callback, err_cb) {
                    var bail = false;
                    err_cb = err_cb || noop;
                    proxy.count = count;
                    return count === 0 ? callback() : proxy;
                    function proxy(err, result) {
                        if (proxy.count <= 0) {
                            throw new Error("after called too many times")
                        }
                        --proxy.count;
                        if (err) {
                            bail = true;
                            callback(err);
                            callback = err_cb
                        } else if (proxy.count === 0 && !bail) {
                            callback(null, result)
                        }
                    }
                }

                function noop() {
                }
            }, {}],
            12: [function (_dereq_, module, exports) {
                module.exports = function (arraybuffer, start, end) {
                    var bytes = arraybuffer.byteLength;
                    start = start || 0;
                    end = end || bytes;
                    if (arraybuffer.slice) {
                        return arraybuffer.slice(start, end)
                    }
                    if (start < 0) {
                        start += bytes
                    }
                    if (end < 0) {
                        end += bytes
                    }
                    if (end > bytes) {
                        end = bytes
                    }
                    if (start >= bytes || start >= end || bytes === 0) {
                        return new ArrayBuffer(0)
                    }
                    var abv = new Uint8Array(arraybuffer);
                    var result = new Uint8Array(end - start);
                    for (var i = start, ii = 0; i < end; i++, ii++) {
                        result[ii] = abv[i]
                    }
                    return result.buffer
                }
            }, {}],
            13: [function (_dereq_, module, exports) {
                (function (chars) {
                    "use strict";
                    exports.encode = function (arraybuffer) {
                        var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = "";
                        for (i = 0; i < len; i += 3) {
                            base64 += chars[bytes[i] >> 2];
                            base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
                            base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
                            base64 += chars[bytes[i + 2] & 63]
                        }
                        if (len % 3 === 2) {
                            base64 = base64.substring(0, base64.length - 1) + "="
                        } else if (len % 3 === 1) {
                            base64 = base64.substring(0, base64.length - 2) + "=="
                        }
                        return base64
                    };
                    exports.decode = function (base64) {
                        var bufferLength = base64.length * .75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
                        if (base64[base64.length - 1] === "=") {
                            bufferLength--;
                            if (base64[base64.length - 2] === "=") {
                                bufferLength--
                            }
                        }
                        var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
                        for (i = 0; i < len; i += 4) {
                            encoded1 = chars.indexOf(base64[i]);
                            encoded2 = chars.indexOf(base64[i + 1]);
                            encoded3 = chars.indexOf(base64[i + 2]);
                            encoded4 = chars.indexOf(base64[i + 3]);
                            bytes[p++] = encoded1 << 2 | encoded2 >> 4;
                            bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
                            bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63
                        }
                        return arraybuffer
                    }
                })("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
            }, {}],
            14: [function (_dereq_, module, exports) {
                (function (global) {
                    var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MSBlobBuilder || global.MozBlobBuilder;
                    var blobSupported = function () {
                        try {
                            var a = new Blob(["hi"]);
                            return a.size === 2
                        } catch (e) {
                            return false
                        }
                    }();
                    var blobSupportsArrayBufferView = blobSupported && function () {
                                try {
                                    var b = new Blob([new Uint8Array([1, 2])]);
                                    return b.size === 2
                                } catch (e) {
                                    return false
                                }
                            }();
                    var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;

                    function mapArrayBufferViews(ary) {
                        for (var i = 0; i < ary.length; i++) {
                            var chunk = ary[i];
                            if (chunk.buffer instanceof ArrayBuffer) {
                                var buf = chunk.buffer;
                                if (chunk.byteLength !== buf.byteLength) {
                                    var copy = new Uint8Array(chunk.byteLength);
                                    copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
                                    buf = copy.buffer
                                }
                                ary[i] = buf
                            }
                        }
                    }

                    function BlobBuilderConstructor(ary, options) {
                        options = options || {};
                        var bb = new BlobBuilder;
                        mapArrayBufferViews(ary);
                        for (var i = 0; i < ary.length; i++) {
                            bb.append(ary[i])
                        }
                        return options.type ? bb.getBlob(options.type) : bb.getBlob()
                    }

                    function BlobConstructor(ary, options) {
                        mapArrayBufferViews(ary);
                        return new Blob(ary, options || {})
                    }

                    module.exports = function () {
                        if (blobSupported) {
                            return blobSupportsArrayBufferView ? global.Blob : BlobConstructor
                        } else if (blobBuilderSupported) {
                            return BlobBuilderConstructor
                        } else {
                            return undefined
                        }
                    }()
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {}],
            15: [function (_dereq_, module, exports) {
                module.exports = Emitter;
                function Emitter(obj) {
                    if (obj)return mixin(obj)
                }

                function mixin(obj) {
                    for (var key in Emitter.prototype) {
                        obj[key] = Emitter.prototype[key]
                    }
                    return obj
                }

                Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
                    this._callbacks = this._callbacks || {};
                    (this._callbacks[event] = this._callbacks[event] || []).push(fn);
                    return this
                };
                Emitter.prototype.once = function (event, fn) {
                    var self = this;
                    this._callbacks = this._callbacks || {};
                    function on() {
                        self.off(event, on);
                        fn.apply(this, arguments)
                    }

                    on.fn = fn;
                    this.on(event, on);
                    return this
                };
                Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
                    this._callbacks = this._callbacks || {};
                    if (0 == arguments.length) {
                        this._callbacks = {};
                        return this
                    }
                    var callbacks = this._callbacks[event];
                    if (!callbacks)return this;
                    if (1 == arguments.length) {
                        delete this._callbacks[event];
                        return this
                    }
                    var cb;
                    for (var i = 0; i < callbacks.length; i++) {
                        cb = callbacks[i];
                        if (cb === fn || cb.fn === fn) {
                            callbacks.splice(i, 1);
                            break
                        }
                    }
                    return this
                };
                Emitter.prototype.emit = function (event) {
                    this._callbacks = this._callbacks || {};
                    var args = [].slice.call(arguments, 1), callbacks = this._callbacks[event];
                    if (callbacks) {
                        callbacks = callbacks.slice(0);
                        for (var i = 0, len = callbacks.length; i < len; ++i) {
                            callbacks[i].apply(this, args)
                        }
                    }
                    return this
                };
                Emitter.prototype.listeners = function (event) {
                    this._callbacks = this._callbacks || {};
                    return this._callbacks[event] || []
                };
                Emitter.prototype.hasListeners = function (event) {
                    return !!this.listeners(event).length
                }
            }, {}],
            16: [function (_dereq_, module, exports) {
                module.exports = function (a, b) {
                    var fn = function () {
                    };
                    fn.prototype = b.prototype;
                    a.prototype = new fn;
                    a.prototype.constructor = a
                }
            }, {}],
            17: [function (_dereq_, module, exports) {
                exports = module.exports = _dereq_("./debug");
                exports.log = log;
                exports.formatArgs = formatArgs;
                exports.save = save;
                exports.load = load;
                exports.useColors = useColors;
                exports.storage = "undefined" != typeof chrome && "undefined" != typeof chrome.storage ? chrome.storage.local : localstorage();
                exports.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"];
                function useColors() {
                    return "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31
                }

                exports.formatters.j = function (v) {
                    return JSON.stringify(v)
                };
                function formatArgs() {
                    var args = arguments;
                    var useColors = this.useColors;
                    args[0] = (useColors ? "%c" : "") + this.namespace + (useColors ? " %c" : " ") + args[0] + (useColors ? "%c " : " ") + "+" + exports.humanize(this.diff);
                    if (!useColors)return args;
                    var c = "color: " + this.color;
                    args = [args[0], c, "color: inherit"].concat(Array.prototype.slice.call(args, 1));
                    var index = 0;
                    var lastC = 0;
                    args[0].replace(/%[a-z%]/g, function (match) {
                        if ("%%" === match)return;
                        index++;
                        if ("%c" === match) {
                            lastC = index
                        }
                    });
                    args.splice(lastC, 0, c);
                    return args
                }

                function log() {
                    return "object" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments)
                }

                function save(namespaces) {
                    try {
                        if (null == namespaces) {
                            exports.storage.removeItem("debug")
                        } else {
                            exports.storage.debug = namespaces
                        }
                    } catch (e) {
                    }
                }

                function load() {
                    var r;
                    try {
                        r = exports.storage.debug
                    } catch (e) {
                    }
                    return r
                }

                exports.enable(load());
                function localstorage() {
                    try {
                        return window.localStorage
                    } catch (e) {
                    }
                }
            }, {"./debug": 18}],
            18: [function (_dereq_, module, exports) {
                exports = module.exports = debug;
                exports.coerce = coerce;
                exports.disable = disable;
                exports.enable = enable;
                exports.enabled = enabled;
                exports.humanize = _dereq_("ms");
                exports.names = [];
                exports.skips = [];
                exports.formatters = {};
                var prevColor = 0;
                var prevTime;

                function selectColor() {
                    return exports.colors[prevColor++ % exports.colors.length]
                }

                function debug(namespace) {
                    function disabled() {
                    }

                    disabled.enabled = false;
                    function enabled() {
                        var self = enabled;
                        var curr = +new Date;
                        var ms = curr - (prevTime || curr);
                        self.diff = ms;
                        self.prev = prevTime;
                        self.curr = curr;
                        prevTime = curr;
                        if (null == self.useColors)self.useColors = exports.useColors();
                        if (null == self.color && self.useColors)self.color = selectColor();
                        var args = Array.prototype.slice.call(arguments);
                        args[0] = exports.coerce(args[0]);
                        if ("string" !== typeof args[0]) {
                            args = ["%o"].concat(args)
                        }
                        var index = 0;
                        args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
                            if (match === "%%")return match;
                            index++;
                            var formatter = exports.formatters[format];
                            if ("function" === typeof formatter) {
                                var val = args[index];
                                match = formatter.call(self, val);
                                args.splice(index, 1);
                                index--
                            }
                            return match
                        });
                        if ("function" === typeof exports.formatArgs) {
                            args = exports.formatArgs.apply(self, args)
                        }
                        var logFn = enabled.log || exports.log || console.log.bind(console);
                        logFn.apply(self, args)
                    }

                    enabled.enabled = true;
                    var fn = exports.enabled(namespace) ? enabled : disabled;
                    fn.namespace = namespace;
                    return fn
                }

                function enable(namespaces) {
                    exports.save(namespaces);
                    var split = (namespaces || "").split(/[\s,]+/);
                    var len = split.length;
                    for (var i = 0; i < len; i++) {
                        if (!split[i])continue;
                        namespaces = split[i].replace(/\*/g, ".*?");
                        if (namespaces[0] === "-") {
                            exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"))
                        } else {
                            exports.names.push(new RegExp("^" + namespaces + "$"))
                        }
                    }
                }

                function disable() {
                    exports.enable("")
                }

                function enabled(name) {
                    var i, len;
                    for (i = 0, len = exports.skips.length; i < len; i++) {
                        if (exports.skips[i].test(name)) {
                            return false
                        }
                    }
                    for (i = 0, len = exports.names.length; i < len; i++) {
                        if (exports.names[i].test(name)) {
                            return true
                        }
                    }
                    return false
                }

                function coerce(val) {
                    if (val instanceof Error)return val.stack || val.message;
                    return val
                }
            }, {ms: 25}],
            19: [function (_dereq_, module, exports) {
                (function (global) {
                    var keys = _dereq_("./keys");
                    var hasBinary = _dereq_("has-binary");
                    var sliceBuffer = _dereq_("arraybuffer.slice");
                    var base64encoder = _dereq_("base64-arraybuffer");
                    var after = _dereq_("after");
                    var utf8 = _dereq_("utf8");
                    var isAndroid = navigator.userAgent.match(/Android/i);
                    var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);
                    var dontSendBlobs = isAndroid || isPhantomJS;
                    exports.protocol = 3;
                    var packets = exports.packets = {
                        open: 0,
                        close: 1,
                        ping: 2,
                        pong: 3,
                        message: 4,
                        upgrade: 5,
                        noop: 6
                    };
                    var packetslist = keys(packets);
                    var err = {type: "error", data: "parser error"};
                    var Blob = _dereq_("blob");
                    exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
                        if ("function" == typeof supportsBinary) {
                            callback = supportsBinary;
                            supportsBinary = false
                        }
                        if ("function" == typeof utf8encode) {
                            callback = utf8encode;
                            utf8encode = null
                        }
                        var data = packet.data === undefined ? undefined : packet.data.buffer || packet.data;
                        if (global.ArrayBuffer && data instanceof ArrayBuffer) {
                            return encodeArrayBuffer(packet, supportsBinary, callback)
                        } else if (Blob && data instanceof global.Blob) {
                            return encodeBlob(packet, supportsBinary, callback)
                        }
                        if (data && data.base64) {
                            return encodeBase64Object(packet, callback)
                        }
                        var encoded = packets[packet.type];
                        if (undefined !== packet.data) {
                            encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data)
                        }
                        return callback("" + encoded)
                    };
                    function encodeBase64Object(packet, callback) {
                        var message = "b" + exports.packets[packet.type] + packet.data.data;
                        return callback(message)
                    }

                    function encodeArrayBuffer(packet, supportsBinary, callback) {
                        if (!supportsBinary) {
                            return exports.encodeBase64Packet(packet, callback)
                        }
                        var data = packet.data;
                        var contentArray = new Uint8Array(data);
                        var resultBuffer = new Uint8Array(1 + data.byteLength);
                        resultBuffer[0] = packets[packet.type];
                        for (var i = 0; i < contentArray.length; i++) {
                            resultBuffer[i + 1] = contentArray[i]
                        }
                        return callback(resultBuffer.buffer)
                    }

                    function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
                        if (!supportsBinary) {
                            return exports.encodeBase64Packet(packet, callback)
                        }
                        var fr = new FileReader;
                        fr.onload = function () {
                            packet.data = fr.result;
                            exports.encodePacket(packet, supportsBinary, true, callback)
                        };
                        return fr.readAsArrayBuffer(packet.data)
                    }

                    function encodeBlob(packet, supportsBinary, callback) {
                        if (!supportsBinary) {
                            return exports.encodeBase64Packet(packet, callback)
                        }
                        if (dontSendBlobs) {
                            return encodeBlobAsArrayBuffer(packet, supportsBinary, callback)
                        }
                        var length = new Uint8Array(1);
                        length[0] = packets[packet.type];
                        var blob = new Blob([length.buffer, packet.data]);
                        return callback(blob)
                    }

                    exports.encodeBase64Packet = function (packet, callback) {
                        var message = "b" + exports.packets[packet.type];
                        if (Blob && packet.data instanceof global.Blob) {
                            var fr = new FileReader;
                            fr.onload = function () {
                                var b64 = fr.result.split(",")[1];
                                callback(message + b64)
                            };
                            return fr.readAsDataURL(packet.data)
                        }
                        var b64data;
                        try {
                            b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data))
                        } catch (e) {
                            var typed = new Uint8Array(packet.data);
                            var basic = new Array(typed.length);
                            for (var i = 0; i < typed.length; i++) {
                                basic[i] = typed[i]
                            }
                            b64data = String.fromCharCode.apply(null, basic)
                        }
                        message += global.btoa(b64data);
                        return callback(message)
                    };
                    exports.decodePacket = function (data, binaryType, utf8decode) {
                        if (typeof data == "string" || data === undefined) {
                            if (data.charAt(0) == "b") {
                                return exports.decodeBase64Packet(data.substr(1), binaryType)
                            }
                            if (utf8decode) {
                                try {
                                    data = utf8.decode(data)
                                } catch (e) {
                                    return err
                                }
                            }
                            var type = data.charAt(0);
                            if (Number(type) != type || !packetslist[type]) {
                                return err
                            }
                            if (data.length > 1) {
                                return {type: packetslist[type], data: data.substring(1)}
                            } else {
                                return {type: packetslist[type]}
                            }
                        }
                        var asArray = new Uint8Array(data);
                        var type = asArray[0];
                        var rest = sliceBuffer(data, 1);
                        if (Blob && binaryType === "blob") {
                            rest = new Blob([rest])
                        }
                        return {type: packetslist[type], data: rest}
                    };
                    exports.decodeBase64Packet = function (msg, binaryType) {
                        var type = packetslist[msg.charAt(0)];
                        if (!global.ArrayBuffer) {
                            return {type: type, data: {base64: true, data: msg.substr(1)}}
                        }
                        var data = base64encoder.decode(msg.substr(1));
                        if (binaryType === "blob" && Blob) {
                            data = new Blob([data])
                        }
                        return {type: type, data: data}
                    };
                    exports.encodePayload = function (packets, supportsBinary, callback) {
                        if (typeof supportsBinary == "function") {
                            callback = supportsBinary;
                            supportsBinary = null
                        }
                        var isBinary = hasBinary(packets);
                        if (supportsBinary && isBinary) {
                            if (Blob && !dontSendBlobs) {
                                return exports.encodePayloadAsBlob(packets, callback)
                            }
                            return exports.encodePayloadAsArrayBuffer(packets, callback)
                        }
                        if (!packets.length) {
                            return callback("0:")
                        }
                        function setLengthHeader(message) {
                            return message.length + ":" + message
                        }

                        function encodeOne(packet, doneCallback) {
                            exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function (message) {
                                doneCallback(null, setLengthHeader(message))
                            })
                        }

                        map(packets, encodeOne, function (err, results) {
                            return callback(results.join(""))
                        })
                    };
                    function map(ary, each, done) {
                        var result = new Array(ary.length);
                        var next = after(ary.length, done);
                        var eachWithIndex = function (i, el, cb) {
                            each(el, function (error, msg) {
                                result[i] = msg;
                                cb(error, result)
                            })
                        };
                        for (var i = 0; i < ary.length; i++) {
                            eachWithIndex(i, ary[i], next)
                        }
                    }

                    exports.decodePayload = function (data, binaryType, callback) {
                        if (typeof data != "string") {
                            return exports.decodePayloadAsBinary(data, binaryType, callback)
                        }
                        if (typeof binaryType === "function") {
                            callback = binaryType;
                            binaryType = null
                        }
                        var packet;
                        if (data == "") {
                            return callback(err, 0, 1)
                        }
                        var length = "", n, msg;
                        for (var i = 0, l = data.length; i < l; i++) {
                            var chr = data.charAt(i);
                            if (":" != chr) {
                                length += chr
                            } else {
                                if ("" == length || length != (n = Number(length))) {
                                    return callback(err, 0, 1)
                                }
                                msg = data.substr(i + 1, n);
                                if (length != msg.length) {
                                    return callback(err, 0, 1)
                                }
                                if (msg.length) {
                                    packet = exports.decodePacket(msg, binaryType, true);
                                    if (err.type == packet.type && err.data == packet.data) {
                                        return callback(err, 0, 1)
                                    }
                                    var ret = callback(packet, i + n, l);
                                    if (false === ret)return
                                }
                                i += n;
                                length = ""
                            }
                        }
                        if (length != "") {
                            return callback(err, 0, 1)
                        }
                    };
                    exports.encodePayloadAsArrayBuffer = function (packets, callback) {
                        if (!packets.length) {
                            return callback(new ArrayBuffer(0))
                        }
                        function encodeOne(packet, doneCallback) {
                            exports.encodePacket(packet, true, true, function (data) {
                                return doneCallback(null, data)
                            })
                        }

                        map(packets, encodeOne, function (err, encodedPackets) {
                            var totalLength = encodedPackets.reduce(function (acc, p) {
                                var len;
                                if (typeof p === "string") {
                                    len = p.length
                                } else {
                                    len = p.byteLength
                                }
                                return acc + len.toString().length + len + 2
                            }, 0);
                            var resultArray = new Uint8Array(totalLength);
                            var bufferIndex = 0;
                            encodedPackets.forEach(function (p) {
                                var isString = typeof p === "string";
                                var ab = p;
                                if (isString) {
                                    var view = new Uint8Array(p.length);
                                    for (var i = 0; i < p.length; i++) {
                                        view[i] = p.charCodeAt(i)
                                    }
                                    ab = view.buffer
                                }
                                if (isString) {
                                    resultArray[bufferIndex++] = 0
                                } else {
                                    resultArray[bufferIndex++] = 1
                                }
                                var lenStr = ab.byteLength.toString();
                                for (var i = 0; i < lenStr.length; i++) {
                                    resultArray[bufferIndex++] = parseInt(lenStr[i])
                                }
                                resultArray[bufferIndex++] = 255;
                                var view = new Uint8Array(ab);
                                for (var i = 0; i < view.length; i++) {
                                    resultArray[bufferIndex++] = view[i]
                                }
                            });
                            return callback(resultArray.buffer)
                        })
                    };
                    exports.encodePayloadAsBlob = function (packets, callback) {
                        function encodeOne(packet, doneCallback) {
                            exports.encodePacket(packet, true, true, function (encoded) {
                                var binaryIdentifier = new Uint8Array(1);
                                binaryIdentifier[0] = 1;
                                if (typeof encoded === "string") {
                                    var view = new Uint8Array(encoded.length);
                                    for (var i = 0; i < encoded.length; i++) {
                                        view[i] = encoded.charCodeAt(i)
                                    }
                                    encoded = view.buffer;
                                    binaryIdentifier[0] = 0
                                }
                                var len = encoded instanceof ArrayBuffer ? encoded.byteLength : encoded.size;
                                var lenStr = len.toString();
                                var lengthAry = new Uint8Array(lenStr.length + 1);
                                for (var i = 0; i < lenStr.length; i++) {
                                    lengthAry[i] = parseInt(lenStr[i])
                                }
                                lengthAry[lenStr.length] = 255;
                                if (Blob) {
                                    var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
                                    doneCallback(null, blob)
                                }
                            })
                        }

                        map(packets, encodeOne, function (err, results) {
                            return callback(new Blob(results))
                        })
                    };
                    exports.decodePayloadAsBinary = function (data, binaryType, callback) {
                        if (typeof binaryType === "function") {
                            callback = binaryType;
                            binaryType = null
                        }
                        var bufferTail = data;
                        var buffers = [];
                        var numberTooLong = false;
                        while (bufferTail.byteLength > 0) {
                            var tailArray = new Uint8Array(bufferTail);
                            var isString = tailArray[0] === 0;
                            var msgLength = "";
                            for (var i = 1; ; i++) {
                                if (tailArray[i] == 255)break;
                                if (msgLength.length > 310) {
                                    numberTooLong = true;
                                    break
                                }
                                msgLength += tailArray[i]
                            }
                            if (numberTooLong)return callback(err, 0, 1);
                            bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
                            msgLength = parseInt(msgLength);
                            var msg = sliceBuffer(bufferTail, 0, msgLength);
                            if (isString) {
                                try {
                                    msg = String.fromCharCode.apply(null, new Uint8Array(msg))
                                } catch (e) {
                                    var typed = new Uint8Array(msg);
                                    msg = "";
                                    for (var i = 0; i < typed.length; i++) {
                                        msg += String.fromCharCode(typed[i])
                                    }
                                }
                            }
                            buffers.push(msg);
                            bufferTail = sliceBuffer(bufferTail, msgLength)
                        }
                        var total = buffers.length;
                        buffers.forEach(function (buffer, i) {
                            callback(exports.decodePacket(buffer, binaryType, true), i, total)
                        })
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {
                "./keys": 20,
                after: 11,
                "arraybuffer.slice": 12,
                "base64-arraybuffer": 13,
                blob: 14,
                "has-binary": 21,
                utf8: 29
            }],
            20: [function (_dereq_, module, exports) {
                module.exports = Object.keys || function keys(obj) {
                            var arr = [];
                            var has = Object.prototype.hasOwnProperty;
                            for (var i in obj) {
                                if (has.call(obj, i)) {
                                    arr.push(i)
                                }
                            }
                            return arr
                        }
            }, {}],
            21: [function (_dereq_, module, exports) {
                (function (global) {
                    var isArray = _dereq_("isarray");
                    module.exports = hasBinary;
                    function hasBinary(data) {
                        function _hasBinary(obj) {
                            if (!obj)return false;
                            if (global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
                                return true
                            }
                            if (isArray(obj)) {
                                for (var i = 0; i < obj.length; i++) {
                                    if (_hasBinary(obj[i])) {
                                        return true
                                    }
                                }
                            } else if (obj && "object" == typeof obj) {
                                if (obj.toJSON) {
                                    obj = obj.toJSON()
                                }
                                for (var key in obj) {
                                    if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
                                        return true
                                    }
                                }
                            }
                            return false
                        }

                        return _hasBinary(data)
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {isarray: 24}],
            22: [function (_dereq_, module, exports) {
                try {
                    module.exports = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest
                } catch (err) {
                    module.exports = false
                }
            }, {}],
            23: [function (_dereq_, module, exports) {
                var indexOf = [].indexOf;
                module.exports = function (arr, obj) {
                    if (indexOf)return arr.indexOf(obj);
                    for (var i = 0; i < arr.length; ++i) {
                        if (arr[i] === obj)return i
                    }
                    return -1
                }
            }, {}],
            24: [function (_dereq_, module, exports) {
                module.exports = Array.isArray || function (arr) {
                            return Object.prototype.toString.call(arr) == "[object Array]"
                        }
            }, {}],
            25: [function (_dereq_, module, exports) {
                var s = 1e3;
                var m = s * 60;
                var h = m * 60;
                var d = h * 24;
                var y = d * 365.25;
                module.exports = function (val, options) {
                    options = options || {};
                    if ("string" == typeof val)return parse(val);
                    return options.long ? long(val) : short(val)
                };
                function parse(str) {
                    str = "" + str;
                    if (str.length > 1e4)return;
                    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
                    if (!match)return;
                    var n = parseFloat(match[1]);
                    var type = (match[2] || "ms").toLowerCase();
                    switch (type) {
                        case"years":
                        case"year":
                        case"yrs":
                        case"yr":
                        case"y":
                            return n * y;
                        case"days":
                        case"day":
                        case"d":
                            return n * d;
                        case"hours":
                        case"hour":
                        case"hrs":
                        case"hr":
                        case"h":
                            return n * h;
                        case"minutes":
                        case"minute":
                        case"mins":
                        case"min":
                        case"m":
                            return n * m;
                        case"seconds":
                        case"second":
                        case"secs":
                        case"sec":
                        case"s":
                            return n * s;
                        case"milliseconds":
                        case"millisecond":
                        case"msecs":
                        case"msec":
                        case"ms":
                            return n
                    }
                }

                function short(ms) {
                    if (ms >= d)return Math.round(ms / d) + "d";
                    if (ms >= h)return Math.round(ms / h) + "h";
                    if (ms >= m)return Math.round(ms / m) + "m";
                    if (ms >= s)return Math.round(ms / s) + "s";
                    return ms + "ms"
                }

                function long(ms) {
                    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms"
                }

                function plural(ms, n, name) {
                    if (ms < n)return;
                    if (ms < n * 1.5)return Math.floor(ms / n) + " " + name;
                    return Math.ceil(ms / n) + " " + name + "s"
                }
            }, {}],
            26: [function (_dereq_, module, exports) {
                (function (global) {
                    var rvalidchars = /^[\],:{}\s]*$/;
                    var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
                    var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
                    var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
                    var rtrimLeft = /^\s+/;
                    var rtrimRight = /\s+$/;
                    module.exports = function parsejson(data) {
                        if ("string" != typeof data || !data) {
                            return null
                        }
                        data = data.replace(rtrimLeft, "").replace(rtrimRight, "");
                        if (global.JSON && JSON.parse) {
                            return JSON.parse(data)
                        }
                        if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                            return new Function("return " + data)()
                        }
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {}],
            27: [function (_dereq_, module, exports) {
                exports.encode = function (obj) {
                    var str = "";
                    for (var i in obj) {
                        if (obj.hasOwnProperty(i)) {
                            if (str.length)str += "&";
                            str += encodeURIComponent(i) + "=" + encodeURIComponent(obj[i])
                        }
                    }
                    return str
                };
                exports.decode = function (qs) {
                    var qry = {};
                    var pairs = qs.split("&");
                    for (var i = 0, l = pairs.length; i < l; i++) {
                        var pair = pairs[i].split("=");
                        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1])
                    }
                    return qry
                }
            }, {}],
            28: [function (_dereq_, module, exports) {
                var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
                var parts = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
                module.exports = function parseuri(str) {
                    var src = str, b = str.indexOf("["), e = str.indexOf("]");
                    if (b != -1 && e != -1) {
                        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length)
                    }
                    var m = re.exec(str || ""), uri = {}, i = 14;
                    while (i--) {
                        uri[parts[i]] = m[i] || ""
                    }
                    if (b != -1 && e != -1) {
                        uri.source = src;
                        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
                        uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
                        uri.ipv6uri = true
                    }
                    return uri
                }
            }, {}],
            29: [function (_dereq_, module, exports) {
                (function (global) {
                    (function (root) {
                        var freeExports = typeof exports == "object" && exports;
                        var freeModule = typeof module == "object" && module && module.exports == freeExports && module;
                        var freeGlobal = typeof global == "object" && global;
                        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
                            root = freeGlobal
                        }
                        var stringFromCharCode = String.fromCharCode;

                        function ucs2decode(string) {
                            var output = [];
                            var counter = 0;
                            var length = string.length;
                            var value;
                            var extra;
                            while (counter < length) {
                                value = string.charCodeAt(counter++);
                                if (value >= 55296 && value <= 56319 && counter < length) {
                                    extra = string.charCodeAt(counter++);
                                    if ((extra & 64512) == 56320) {
                                        output.push(((value & 1023) << 10) + (extra & 1023) + 65536)
                                    } else {
                                        output.push(value);
                                        counter--
                                    }
                                } else {
                                    output.push(value)
                                }
                            }
                            return output
                        }

                        function ucs2encode(array) {
                            var length = array.length;
                            var index = -1;
                            var value;
                            var output = "";
                            while (++index < length) {
                                value = array[index];
                                if (value > 65535) {
                                    value -= 65536;
                                    output += stringFromCharCode(value >>> 10 & 1023 | 55296);
                                    value = 56320 | value & 1023
                                }
                                output += stringFromCharCode(value)
                            }
                            return output
                        }

                        function checkScalarValue(codePoint) {
                            if (codePoint >= 55296 && codePoint <= 57343) {
                                throw Error("Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value")
                            }
                        }

                        function createByte(codePoint, shift) {
                            return stringFromCharCode(codePoint >> shift & 63 | 128)
                        }

                        function encodeCodePoint(codePoint) {
                            if ((codePoint & 4294967168) == 0) {
                                return stringFromCharCode(codePoint)
                            }
                            var symbol = "";
                            if ((codePoint & 4294965248) == 0) {
                                symbol = stringFromCharCode(codePoint >> 6 & 31 | 192)
                            } else if ((codePoint & 4294901760) == 0) {
                                checkScalarValue(codePoint);
                                symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);
                                symbol += createByte(codePoint, 6)
                            } else if ((codePoint & 4292870144) == 0) {
                                symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);
                                symbol += createByte(codePoint, 12);
                                symbol += createByte(codePoint, 6)
                            }
                            symbol += stringFromCharCode(codePoint & 63 | 128);
                            return symbol
                        }

                        function utf8encode(string) {
                            var codePoints = ucs2decode(string);
                            var length = codePoints.length;
                            var index = -1;
                            var codePoint;
                            var byteString = "";
                            while (++index < length) {
                                codePoint = codePoints[index];
                                byteString += encodeCodePoint(codePoint)
                            }
                            return byteString
                        }

                        function readContinuationByte() {
                            if (byteIndex >= byteCount) {
                                throw Error("Invalid byte index")
                            }
                            var continuationByte = byteArray[byteIndex] & 255;
                            byteIndex++;
                            if ((continuationByte & 192) == 128) {
                                return continuationByte & 63
                            }
                            throw Error("Invalid continuation byte")
                        }

                        function decodeSymbol() {
                            var byte1;
                            var byte2;
                            var byte3;
                            var byte4;
                            var codePoint;
                            if (byteIndex > byteCount) {
                                throw Error("Invalid byte index")
                            }
                            if (byteIndex == byteCount) {
                                return false
                            }
                            byte1 = byteArray[byteIndex] & 255;
                            byteIndex++;
                            if ((byte1 & 128) == 0) {
                                return byte1
                            }
                            if ((byte1 & 224) == 192) {
                                var byte2 = readContinuationByte();
                                codePoint = (byte1 & 31) << 6 | byte2;
                                if (codePoint >= 128) {
                                    return codePoint
                                } else {
                                    throw Error("Invalid continuation byte")
                                }
                            }
                            if ((byte1 & 240) == 224) {
                                byte2 = readContinuationByte();
                                byte3 = readContinuationByte();
                                codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;
                                if (codePoint >= 2048) {
                                    checkScalarValue(codePoint);
                                    return codePoint
                                } else {
                                    throw Error("Invalid continuation byte")
                                }
                            }
                            if ((byte1 & 248) == 240) {
                                byte2 = readContinuationByte();
                                byte3 = readContinuationByte();
                                byte4 = readContinuationByte();
                                codePoint = (byte1 & 15) << 18 | byte2 << 12 | byte3 << 6 | byte4;
                                if (codePoint >= 65536 && codePoint <= 1114111) {
                                    return codePoint
                                }
                            }
                            throw Error("Invalid UTF-8 detected")
                        }

                        var byteArray;
                        var byteCount;
                        var byteIndex;

                        function utf8decode(byteString) {
                            byteArray = ucs2decode(byteString);
                            byteCount = byteArray.length;
                            byteIndex = 0;
                            var codePoints = [];
                            var tmp;
                            while ((tmp = decodeSymbol()) !== false) {
                                codePoints.push(tmp)
                            }
                            return ucs2encode(codePoints)
                        }

                        var utf8 = {version: "2.0.0", encode: utf8encode, decode: utf8decode};
                        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
                            define(function () {
                                return utf8
                            })
                        } else if (freeExports && !freeExports.nodeType) {
                            if (freeModule) {
                                freeModule.exports = utf8
                            } else {
                                var object = {};
                                var hasOwnProperty = object.hasOwnProperty;
                                for (var key in utf8) {
                                    hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key])
                                }
                            }
                        } else {
                            root.utf8 = utf8
                        }
                    })(this)
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {}],
            30: [function (_dereq_, module, exports) {
                "use strict";
                var alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""), length = 64, map = {}, seed = 0, i = 0, prev;

                function encode(num) {
                    var encoded = "";
                    do {
                        encoded = alphabet[num % length] + encoded;
                        num = Math.floor(num / length)
                    } while (num > 0);
                    return encoded
                }

                function decode(str) {
                    var decoded = 0;
                    for (i = 0; i < str.length; i++) {
                        decoded = decoded * length + map[str.charAt(i)]
                    }
                    return decoded
                }

                function yeast() {
                    var now = encode(+new Date);
                    if (now !== prev)return seed = 0, prev = now;
                    return now + "." + encode(seed++)
                }

                for (; i < length; i++)map[alphabet[i]] = i;
                yeast.encode = encode;
                yeast.decode = decode;
                module.exports = yeast
            }, {}],
            31: [function (_dereq_, module, exports) {
                var url = _dereq_("./url");
                var parser = _dereq_("socket.io-parser");
                var Manager = _dereq_("./manager");
                var debug = _dereq_("debug")("socket.io-client");
                module.exports = exports = lookup;
                var cache = exports.managers = {};

                function lookup(uri, opts) {
                    if (typeof uri == "object") {
                        opts = uri;
                        uri = undefined
                    }
                    opts = opts || {};
                    var parsed = url(uri);
                    var source = parsed.source;
                    var id = parsed.id;
                    var path = parsed.path;
                    var sameNamespace = cache[id] && path in cache[id].nsps;
                    var newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
                    var io;
                    if (newConnection) {
                        debug("ignoring socket cache for %s", source);
                        io = Manager(source, opts)
                    } else {
                        if (!cache[id]) {
                            debug("new io instance for %s", source);
                            cache[id] = Manager(source, opts)
                        }
                        io = cache[id]
                    }
                    return io.socket(parsed.path)
                }

                exports.protocol = parser.protocol;
                exports.connect = lookup;
                exports.Manager = _dereq_("./manager");
                exports.Socket = _dereq_("./socket")
            }, {"./manager": 32, "./socket": 34, "./url": 35, debug: 39, "socket.io-parser": 47}],
            32: [function (_dereq_, module, exports) {
                var eio = _dereq_("engine.io-client");
                var Socket = _dereq_("./socket");
                var Emitter = _dereq_("component-emitter");
                var parser = _dereq_("socket.io-parser");
                var on = _dereq_("./on");
                var bind = _dereq_("component-bind");
                var debug = _dereq_("debug")("socket.io-client:manager");
                var indexOf = _dereq_("indexof");
                var Backoff = _dereq_("backo2");
                var has = Object.prototype.hasOwnProperty;
                module.exports = Manager;
                function Manager(uri, opts) {
                    if (!(this instanceof Manager))return new Manager(uri, opts);
                    if (uri && "object" == typeof uri) {
                        opts = uri;
                        uri = undefined
                    }
                    opts = opts || {};
                    opts.path = opts.path || "/socket.io";
                    this.nsps = {};
                    this.subs = [];
                    this.opts = opts;
                    this.reconnection(opts.reconnection !== false);
                    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
                    this.reconnectionDelay(opts.reconnectionDelay || 1e3);
                    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
                    this.randomizationFactor(opts.randomizationFactor || .5);
                    this.backoff = new Backoff({
                        min: this.reconnectionDelay(),
                        max: this.reconnectionDelayMax(),
                        jitter: this.randomizationFactor()
                    });
                    this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
                    this.readyState = "closed";
                    this.uri = uri;
                    this.connecting = [];
                    this.lastPing = null;
                    this.encoding = false;
                    this.packetBuffer = [];
                    this.encoder = new parser.Encoder;
                    this.decoder = new parser.Decoder;
                    this.autoConnect = opts.autoConnect !== false;
                    if (this.autoConnect)this.open()
                }

                Manager.prototype.emitAll = function () {
                    this.emit.apply(this, arguments);
                    for (var nsp in this.nsps) {
                        if (has.call(this.nsps, nsp)) {
                            this.nsps[nsp].emit.apply(this.nsps[nsp], arguments)
                        }
                    }
                };
                Manager.prototype.updateSocketIds = function () {
                    for (var nsp in this.nsps) {
                        if (has.call(this.nsps, nsp)) {
                            this.nsps[nsp].id = this.engine.id
                        }
                    }
                };
                Emitter(Manager.prototype);
                Manager.prototype.reconnection = function (v) {
                    if (!arguments.length)return this._reconnection;
                    this._reconnection = !!v;
                    return this
                };
                Manager.prototype.reconnectionAttempts = function (v) {
                    if (!arguments.length)return this._reconnectionAttempts;
                    this._reconnectionAttempts = v;
                    return this
                };
                Manager.prototype.reconnectionDelay = function (v) {
                    if (!arguments.length)return this._reconnectionDelay;
                    this._reconnectionDelay = v;
                    this.backoff && this.backoff.setMin(v);
                    return this
                };
                Manager.prototype.randomizationFactor = function (v) {
                    if (!arguments.length)return this._randomizationFactor;
                    this._randomizationFactor = v;
                    this.backoff && this.backoff.setJitter(v);
                    return this
                };
                Manager.prototype.reconnectionDelayMax = function (v) {
                    if (!arguments.length)return this._reconnectionDelayMax;
                    this._reconnectionDelayMax = v;
                    this.backoff && this.backoff.setMax(v);
                    return this
                };
                Manager.prototype.timeout = function (v) {
                    if (!arguments.length)return this._timeout;
                    this._timeout = v;
                    return this
                };
                Manager.prototype.maybeReconnectOnOpen = function () {
                    if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
                        this.reconnect()
                    }
                };
                Manager.prototype.open = Manager.prototype.connect = function (fn) {
                    debug("readyState %s", this.readyState);
                    if (~this.readyState.indexOf("open"))return this;
                    debug("opening %s", this.uri);
                    this.engine = eio(this.uri, this.opts);
                    var socket = this.engine;
                    var self = this;
                    this.readyState = "opening";
                    this.skipReconnect = false;
                    var openSub = on(socket, "open", function () {
                        self.onopen();
                        fn && fn()
                    });
                    var errorSub = on(socket, "error", function (data) {
                        debug("connect_error");
                        self.cleanup();
                        self.readyState = "closed";
                        self.emitAll("connect_error", data);
                        if (fn) {
                            var err = new Error("Connection error");
                            err.data = data;
                            fn(err)
                        } else {
                            self.maybeReconnectOnOpen()
                        }
                    });
                    if (false !== this._timeout) {
                        var timeout = this._timeout;
                        debug("connect attempt will timeout after %d", timeout);
                        var timer = setTimeout(function () {
                            debug("connect attempt timed out after %d", timeout);
                            openSub.destroy();
                            socket.close();
                            socket.emit("error", "timeout");
                            self.emitAll("connect_timeout", timeout)
                        }, timeout);
                        this.subs.push({
                            destroy: function () {
                                clearTimeout(timer)
                            }
                        })
                    }
                    this.subs.push(openSub);
                    this.subs.push(errorSub);
                    return this
                };
                Manager.prototype.onopen = function () {
                    debug("open");
                    this.cleanup();
                    this.readyState = "open";
                    this.emit("open");
                    var socket = this.engine;
                    this.subs.push(on(socket, "data", bind(this, "ondata")));
                    this.subs.push(on(socket, "ping", bind(this, "onping")));
                    this.subs.push(on(socket, "pong", bind(this, "onpong")));
                    this.subs.push(on(socket, "error", bind(this, "onerror")));
                    this.subs.push(on(socket, "close", bind(this, "onclose")));
                    this.subs.push(on(this.decoder, "decoded", bind(this, "ondecoded")))
                };
                Manager.prototype.onping = function () {
                    this.lastPing = new Date;
                    this.emitAll("ping")
                };
                Manager.prototype.onpong = function () {
                    this.emitAll("pong", new Date - this.lastPing)
                };
                Manager.prototype.ondata = function (data) {
                    this.decoder.add(data)
                };
                Manager.prototype.ondecoded = function (packet) {
                    this.emit("packet", packet)
                };
                Manager.prototype.onerror = function (err) {
                    debug("error", err);
                    this.emitAll("error", err)
                };
                Manager.prototype.socket = function (nsp) {
                    var socket = this.nsps[nsp];
                    if (!socket) {
                        socket = new Socket(this, nsp);
                        this.nsps[nsp] = socket;
                        var self = this;
                        socket.on("connecting", onConnecting);
                        socket.on("connect", function () {
                            socket.id = self.engine.id
                        });
                        if (this.autoConnect) {
                            onConnecting()
                        }
                    }
                    function onConnecting() {
                        if (!~indexOf(self.connecting, socket)) {
                            self.connecting.push(socket)
                        }
                    }

                    return socket
                };
                Manager.prototype.destroy = function (socket) {
                    var index = indexOf(this.connecting, socket);
                    if (~index)this.connecting.splice(index, 1);
                    if (this.connecting.length)return;
                    this.close()
                };
                Manager.prototype.packet = function (packet) {
                    debug("writing packet %j", packet);
                    var self = this;
                    if (!self.encoding) {
                        self.encoding = true;
                        this.encoder.encode(packet, function (encodedPackets) {
                            for (var i = 0; i < encodedPackets.length; i++) {
                                self.engine.write(encodedPackets[i], packet.options)
                            }
                            self.encoding = false;
                            self.processPacketQueue()
                        })
                    } else {
                        self.packetBuffer.push(packet)
                    }
                };
                Manager.prototype.processPacketQueue = function () {
                    if (this.packetBuffer.length > 0 && !this.encoding) {
                        var pack = this.packetBuffer.shift();
                        this.packet(pack)
                    }
                };
                Manager.prototype.cleanup = function () {
                    debug("cleanup");
                    var sub;
                    while (sub = this.subs.shift())sub.destroy();
                    this.packetBuffer = [];
                    this.encoding = false;
                    this.lastPing = null;
                    this.decoder.destroy()
                };
                Manager.prototype.close = Manager.prototype.disconnect = function () {
                    debug("disconnect");
                    this.skipReconnect = true;
                    this.reconnecting = false;
                    if ("opening" == this.readyState) {
                        this.cleanup()
                    }
                    this.backoff.reset();
                    this.readyState = "closed";
                    if (this.engine)this.engine.close()
                };
                Manager.prototype.onclose = function (reason) {
                    debug("onclose");
                    this.cleanup();
                    this.backoff.reset();
                    this.readyState = "closed";
                    this.emit("close", reason);
                    if (this._reconnection && !this.skipReconnect) {
                        this.reconnect()
                    }
                };
                Manager.prototype.reconnect = function () {
                    if (this.reconnecting || this.skipReconnect)return this;
                    var self = this;
                    if (this.backoff.attempts >= this._reconnectionAttempts) {
                        debug("reconnect failed");
                        this.backoff.reset();
                        this.emitAll("reconnect_failed");
                        this.reconnecting = false
                    } else {
                        var delay = this.backoff.duration();
                        debug("will wait %dms before reconnect attempt", delay);
                        this.reconnecting = true;
                        var timer = setTimeout(function () {
                            if (self.skipReconnect)return;
                            debug("attempting reconnect");
                            self.emitAll("reconnect_attempt", self.backoff.attempts);
                            self.emitAll("reconnecting", self.backoff.attempts);
                            if (self.skipReconnect)return;
                            self.open(function (err) {
                                if (err) {
                                    debug("reconnect attempt error");
                                    self.reconnecting = false;
                                    self.reconnect();
                                    self.emitAll("reconnect_error", err.data)
                                } else {
                                    debug("reconnect success");
                                    self.onreconnect()
                                }
                            })
                        }, delay);
                        this.subs.push({
                            destroy: function () {
                                clearTimeout(timer)
                            }
                        })
                    }
                };
                Manager.prototype.onreconnect = function () {
                    var attempt = this.backoff.attempts;
                    this.reconnecting = false;
                    this.backoff.reset();
                    this.updateSocketIds();
                    this.emitAll("reconnect", attempt)
                }
            }, {
                "./on": 33,
                "./socket": 34,
                backo2: 36,
                "component-bind": 37,
                "component-emitter": 38,
                debug: 39,
                "engine.io-client": 1,
                indexof: 42,
                "socket.io-parser": 47
            }],
            33: [function (_dereq_, module, exports) {
                module.exports = on;
                function on(obj, ev, fn) {
                    obj.on(ev, fn);
                    return {
                        destroy: function () {
                            obj.removeListener(ev, fn)
                        }
                    }
                }
            }, {}],
            34: [function (_dereq_, module, exports) {
                var parser = _dereq_("socket.io-parser");
                var Emitter = _dereq_("component-emitter");
                var toArray = _dereq_("to-array");
                var on = _dereq_("./on");
                var bind = _dereq_("component-bind");
                var debug = _dereq_("debug")("socket.io-client:socket");
                var hasBin = _dereq_("has-binary");
                module.exports = exports = Socket;
                var events = {
                    connect: 1,
                    connect_error: 1,
                    connect_timeout: 1,
                    connecting: 1,
                    disconnect: 1,
                    error: 1,
                    reconnect: 1,
                    reconnect_attempt: 1,
                    reconnect_failed: 1,
                    reconnect_error: 1,
                    reconnecting: 1,
                    ping: 1,
                    pong: 1
                };
                var emit = Emitter.prototype.emit;

                function Socket(io, nsp) {
                    this.io = io;
                    this.nsp = nsp;
                    this.json = this;
                    this.ids = 0;
                    this.acks = {};
                    this.receiveBuffer = [];
                    this.sendBuffer = [];
                    this.connected = false;
                    this.disconnected = true;
                    if (this.io.autoConnect)this.open()
                }

                Emitter(Socket.prototype);
                Socket.prototype.subEvents = function () {
                    if (this.subs)return;
                    var io = this.io;
                    this.subs = [on(io, "open", bind(this, "onopen")), on(io, "packet", bind(this, "onpacket")), on(io, "close", bind(this, "onclose"))]
                };
                Socket.prototype.open = Socket.prototype.connect = function () {
                    if (this.connected)return this;
                    this.subEvents();
                    this.io.open();
                    if ("open" == this.io.readyState)this.onopen();
                    this.emit("connecting");
                    return this
                };
                Socket.prototype.send = function () {
                    var args = toArray(arguments);
                    args.unshift("message");
                    this.emit.apply(this, args);
                    return this
                };
                Socket.prototype.emit = function (ev) {
                    if (events.hasOwnProperty(ev)) {
                        emit.apply(this, arguments);
                        return this
                    }
                    var args = toArray(arguments);
                    var parserType = parser.EVENT;
                    if (hasBin(args)) {
                        parserType = parser.BINARY_EVENT
                    }
                    var packet = {type: parserType, data: args};
                    packet.options = {};
                    packet.options.compress = !this.flags || false !== this.flags.compress;
                    if ("function" == typeof args[args.length - 1]) {
                        debug("emitting packet with ack id %d", this.ids);
                        this.acks[this.ids] = args.pop();
                        packet.id = this.ids++
                    }
                    if (this.connected) {
                        this.packet(packet)
                    } else {
                        this.sendBuffer.push(packet)
                    }
                    delete this.flags;
                    return this
                };
                Socket.prototype.packet = function (packet) {
                    packet.nsp = this.nsp;
                    this.io.packet(packet)
                };
                Socket.prototype.onopen = function () {
                    debug("transport is open - connecting");
                    if ("/" != this.nsp) {
                        this.packet({type: parser.CONNECT})
                    }
                };
                Socket.prototype.onclose = function (reason) {
                    debug("close (%s)", reason);
                    this.connected = false;
                    this.disconnected = true;
                    delete this.id;
                    this.emit("disconnect", reason)
                };
                Socket.prototype.onpacket = function (packet) {
                    if (packet.nsp != this.nsp)return;
                    switch (packet.type) {
                        case parser.CONNECT:
                            this.onconnect();
                            break;
                        case parser.EVENT:
                            this.onevent(packet);
                            break;
                        case parser.BINARY_EVENT:
                            this.onevent(packet);
                            break;
                        case parser.ACK:
                            this.onack(packet);
                            break;
                        case parser.BINARY_ACK:
                            this.onack(packet);
                            break;
                        case parser.DISCONNECT:
                            this.ondisconnect();
                            break;
                        case parser.ERROR:
                            this.emit("error", packet.data);
                            break
                    }
                };
                Socket.prototype.onevent = function (packet) {
                    var args = packet.data || [];
                    debug("emitting event %j", args);
                    if (null != packet.id) {
                        debug("attaching ack callback to event");
                        args.push(this.ack(packet.id))
                    }
                    if (this.connected) {
                        emit.apply(this, args)
                    } else {
                        this.receiveBuffer.push(args)
                    }
                };
                Socket.prototype.ack = function (id) {
                    var self = this;
                    var sent = false;
                    return function () {
                        if (sent)return;
                        sent = true;
                        var args = toArray(arguments);
                        debug("sending ack %j", args);
                        var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
                        self.packet({type: type, id: id, data: args})
                    }
                };
                Socket.prototype.onack = function (packet) {
                    var ack = this.acks[packet.id];
                    if ("function" == typeof ack) {
                        debug("calling ack %s with %j", packet.id, packet.data);
                        ack.apply(this, packet.data);
                        delete this.acks[packet.id]
                    } else {
                        debug("bad ack %s", packet.id)
                    }
                };
                Socket.prototype.onconnect = function () {
                    this.connected = true;
                    this.disconnected = false;
                    this.emit("connect");
                    this.emitBuffered()
                };
                Socket.prototype.emitBuffered = function () {
                    var i;
                    for (i = 0; i < this.receiveBuffer.length; i++) {
                        emit.apply(this, this.receiveBuffer[i])
                    }
                    this.receiveBuffer = [];
                    for (i = 0; i < this.sendBuffer.length; i++) {
                        this.packet(this.sendBuffer[i])
                    }
                    this.sendBuffer = []
                };
                Socket.prototype.ondisconnect = function () {
                    debug("server disconnect (%s)", this.nsp);
                    this.destroy();
                    this.onclose("io server disconnect")
                };
                Socket.prototype.destroy = function () {
                    if (this.subs) {
                        for (var i = 0; i < this.subs.length; i++) {
                            this.subs[i].destroy()
                        }
                        this.subs = null
                    }
                    this.io.destroy(this)
                };
                Socket.prototype.close = Socket.prototype.disconnect = function () {
                    if (this.connected) {
                        debug("performing disconnect (%s)", this.nsp);
                        this.packet({type: parser.DISCONNECT})
                    }
                    this.destroy();
                    if (this.connected) {
                        this.onclose("io client disconnect")
                    }
                    return this
                };
                Socket.prototype.compress = function (compress) {
                    this.flags = this.flags || {};
                    this.flags.compress = compress;
                    return this
                }
            }, {
                "./on": 33,
                "component-bind": 37,
                "component-emitter": 38,
                debug: 39,
                "has-binary": 41,
                "socket.io-parser": 47,
                "to-array": 51
            }],
            35: [function (_dereq_, module, exports) {
                (function (global) {
                    var parseuri = _dereq_("parseuri");
                    var debug = _dereq_("debug")("socket.io-client:url");
                    module.exports = url;
                    function url(uri, loc) {
                        var obj = uri;
                        var loc = loc || global.location;
                        if (null == uri)uri = loc.protocol + "//" + loc.host;
                        if ("string" == typeof uri) {
                            if ("/" == uri.charAt(0)) {
                                if ("/" == uri.charAt(1)) {
                                    uri = loc.protocol + uri
                                } else {
                                    uri = loc.host + uri
                                }
                            }
                            if (!/^(https?|wss?):\/\//.test(uri)) {
                                debug("protocol-less url %s", uri);
                                if ("undefined" != typeof loc) {
                                    uri = loc.protocol + "//" + uri
                                } else {
                                    uri = "https://" + uri
                                }
                            }
                            debug("parse %s", uri);
                            obj = parseuri(uri)
                        }
                        if (!obj.port) {
                            if (/^(http|ws)$/.test(obj.protocol)) {
                                obj.port = "80"
                            } else if (/^(http|ws)s$/.test(obj.protocol)) {
                                obj.port = "443"
                            }
                        }
                        obj.path = obj.path || "/";
                        var ipv6 = obj.host.indexOf(":") !== -1;
                        var host = ipv6 ? "[" + obj.host + "]" : obj.host;
                        obj.id = obj.protocol + "://" + host + ":" + obj.port;
                        obj.href = obj.protocol + "://" + host + (loc && loc.port == obj.port ? "" : ":" + obj.port);
                        return obj
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {debug: 39, parseuri: 45}],
            36: [function (_dereq_, module, exports) {
                module.exports = Backoff;
                function Backoff(opts) {
                    opts = opts || {};
                    this.ms = opts.min || 100;
                    this.max = opts.max || 1e4;
                    this.factor = opts.factor || 2;
                    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
                    this.attempts = 0
                }

                Backoff.prototype.duration = function () {
                    var ms = this.ms * Math.pow(this.factor, this.attempts++);
                    if (this.jitter) {
                        var rand = Math.random();
                        var deviation = Math.floor(rand * this.jitter * ms);
                        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation
                    }
                    return Math.min(ms, this.max) | 0
                };
                Backoff.prototype.reset = function () {
                    this.attempts = 0
                };
                Backoff.prototype.setMin = function (min) {
                    this.ms = min
                };
                Backoff.prototype.setMax = function (max) {
                    this.max = max
                };
                Backoff.prototype.setJitter = function (jitter) {
                    this.jitter = jitter
                }
            }, {}],
            37: [function (_dereq_, module, exports) {
                var slice = [].slice;
                module.exports = function (obj, fn) {
                    if ("string" == typeof fn)fn = obj[fn];
                    if ("function" != typeof fn)throw new Error("bind() requires a function");
                    var args = slice.call(arguments, 2);
                    return function () {
                        return fn.apply(obj, args.concat(slice.call(arguments)))
                    }
                }
            }, {}],
            38: [function (_dereq_, module, exports) {
                module.exports = Emitter;
                function Emitter(obj) {
                    if (obj)return mixin(obj)
                }

                function mixin(obj) {
                    for (var key in Emitter.prototype) {
                        obj[key] = Emitter.prototype[key]
                    }
                    return obj
                }

                Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
                    this._callbacks = this._callbacks || {};
                    (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
                    return this
                };
                Emitter.prototype.once = function (event, fn) {
                    function on() {
                        this.off(event, on);
                        fn.apply(this, arguments)
                    }

                    on.fn = fn;
                    this.on(event, on);
                    return this
                };
                Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
                    this._callbacks = this._callbacks || {};
                    if (0 == arguments.length) {
                        this._callbacks = {};
                        return this
                    }
                    var callbacks = this._callbacks["$" + event];
                    if (!callbacks)return this;
                    if (1 == arguments.length) {
                        delete this._callbacks["$" + event];
                        return this
                    }
                    var cb;
                    for (var i = 0; i < callbacks.length; i++) {
                        cb = callbacks[i];
                        if (cb === fn || cb.fn === fn) {
                            callbacks.splice(i, 1);
                            break
                        }
                    }
                    return this
                };
                Emitter.prototype.emit = function (event) {
                    this._callbacks = this._callbacks || {};
                    var args = [].slice.call(arguments, 1), callbacks = this._callbacks["$" + event];
                    if (callbacks) {
                        callbacks = callbacks.slice(0);
                        for (var i = 0, len = callbacks.length; i < len; ++i) {
                            callbacks[i].apply(this, args)
                        }
                    }
                    return this
                };
                Emitter.prototype.listeners = function (event) {
                    this._callbacks = this._callbacks || {};
                    return this._callbacks["$" + event] || []
                };
                Emitter.prototype.hasListeners = function (event) {
                    return !!this.listeners(event).length
                }
            }, {}],
            39: [function (_dereq_, module, exports) {
                arguments[4][17][0].apply(exports, arguments)
            }, {"./debug": 40, dup: 17}],
            40: [function (_dereq_, module, exports) {
                arguments[4][18][0].apply(exports, arguments)
            }, {dup: 18, ms: 44}],
            41: [function (_dereq_, module, exports) {
                (function (global) {
                    var isArray = _dereq_("isarray");
                    module.exports = hasBinary;
                    function hasBinary(data) {
                        function _hasBinary(obj) {
                            if (!obj)return false;
                            if (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer || global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
                                return true
                            }
                            if (isArray(obj)) {
                                for (var i = 0; i < obj.length; i++) {
                                    if (_hasBinary(obj[i])) {
                                        return true
                                    }
                                }
                            } else if (obj && "object" == typeof obj) {
                                if (obj.toJSON && "function" == typeof obj.toJSON) {
                                    obj = obj.toJSON()
                                }
                                for (var key in obj) {
                                    if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
                                        return true
                                    }
                                }
                            }
                            return false
                        }

                        return _hasBinary(data)
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {isarray: 43}],
            42: [function (_dereq_, module, exports) {
                arguments[4][23][0].apply(exports, arguments)
            }, {dup: 23}],
            43: [function (_dereq_, module, exports) {
                arguments[4][24][0].apply(exports, arguments)
            }, {dup: 24}],
            44: [function (_dereq_, module, exports) {
                arguments[4][25][0].apply(exports, arguments)
            }, {dup: 25}],
            45: [function (_dereq_, module, exports) {
                arguments[4][28][0].apply(exports, arguments)
            }, {dup: 28}],
            46: [function (_dereq_, module, exports) {
                (function (global) {
                    var isArray = _dereq_("isarray");
                    var isBuf = _dereq_("./is-buffer");
                    exports.deconstructPacket = function (packet) {
                        var buffers = [];
                        var packetData = packet.data;

                        function _deconstructPacket(data) {
                            if (!data)return data;
                            if (isBuf(data)) {
                                var placeholder = {_placeholder: true, num: buffers.length};
                                buffers.push(data);
                                return placeholder
                            } else if (isArray(data)) {
                                var newData = new Array(data.length);
                                for (var i = 0; i < data.length; i++) {
                                    newData[i] = _deconstructPacket(data[i])
                                }
                                return newData
                            } else if ("object" == typeof data && !(data instanceof Date)) {
                                var newData = {};
                                for (var key in data) {
                                    newData[key] = _deconstructPacket(data[key])
                                }
                                return newData
                            }
                            return data
                        }

                        var pack = packet;
                        pack.data = _deconstructPacket(packetData);
                        pack.attachments = buffers.length;
                        return {packet: pack, buffers: buffers}
                    };
                    exports.reconstructPacket = function (packet, buffers) {
                        var curPlaceHolder = 0;

                        function _reconstructPacket(data) {
                            if (data && data._placeholder) {
                                var buf = buffers[data.num];
                                return buf
                            } else if (isArray(data)) {
                                for (var i = 0; i < data.length; i++) {
                                    data[i] = _reconstructPacket(data[i])
                                }
                                return data
                            } else if (data && "object" == typeof data) {
                                for (var key in data) {
                                    data[key] = _reconstructPacket(data[key])
                                }
                                return data
                            }
                            return data
                        }

                        packet.data = _reconstructPacket(packet.data);
                        packet.attachments = undefined;
                        return packet
                    };
                    exports.removeBlobs = function (data, callback) {
                        function _removeBlobs(obj, curKey, containingObject) {
                            if (!obj)return obj;
                            if (global.Blob && obj instanceof Blob || global.File && obj instanceof File) {
                                pendingBlobs++;
                                var fileReader = new FileReader;
                                fileReader.onload = function () {
                                    if (containingObject) {
                                        containingObject[curKey] = this.result
                                    } else {
                                        bloblessData = this.result
                                    }
                                    if (!--pendingBlobs) {
                                        callback(bloblessData)
                                    }
                                };
                                fileReader.readAsArrayBuffer(obj)
                            } else if (isArray(obj)) {
                                for (var i = 0; i < obj.length; i++) {
                                    _removeBlobs(obj[i], i, obj)
                                }
                            } else if (obj && "object" == typeof obj && !isBuf(obj)) {
                                for (var key in obj) {
                                    _removeBlobs(obj[key], key, obj)
                                }
                            }
                        }

                        var pendingBlobs = 0;
                        var bloblessData = data;
                        _removeBlobs(bloblessData);
                        if (!pendingBlobs) {
                            callback(bloblessData)
                        }
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {"./is-buffer": 48, isarray: 43}],
            47: [function (_dereq_, module, exports) {
                var debug = _dereq_("debug")("socket.io-parser");
                var json = _dereq_("json3");
                var isArray = _dereq_("isarray");
                var Emitter = _dereq_("component-emitter");
                var binary = _dereq_("./binary");
                var isBuf = _dereq_("./is-buffer");
                exports.protocol = 4;
                exports.types = ["CONNECT", "DISCONNECT", "EVENT", "BINARY_EVENT", "ACK", "BINARY_ACK", "ERROR"];
                exports.CONNECT = 0;
                exports.DISCONNECT = 1;
                exports.EVENT = 2;
                exports.ACK = 3;
                exports.ERROR = 4;
                exports.BINARY_EVENT = 5;
                exports.BINARY_ACK = 6;
                exports.Encoder = Encoder;
                exports.Decoder = Decoder;
                function Encoder() {
                }

                Encoder.prototype.encode = function (obj, callback) {
                    debug("encoding packet %j", obj);
                    if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
                        encodeAsBinary(obj, callback)
                    } else {
                        var encoding = encodeAsString(obj);
                        callback([encoding])
                    }
                };
                function encodeAsString(obj) {
                    var str = "";
                    var nsp = false;
                    str += obj.type;
                    if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
                        str += obj.attachments;
                        str += "-"
                    }
                    if (obj.nsp && "/" != obj.nsp) {
                        nsp = true;
                        str += obj.nsp
                    }
                    if (null != obj.id) {
                        if (nsp) {
                            str += ",";
                            nsp = false
                        }
                        str += obj.id
                    }
                    if (null != obj.data) {
                        if (nsp)str += ",";
                        str += json.stringify(obj.data)
                    }
                    debug("encoded %j as %s", obj, str);
                    return str
                }

                function encodeAsBinary(obj, callback) {
                    function writeEncoding(bloblessData) {
                        var deconstruction = binary.deconstructPacket(bloblessData);
                        var pack = encodeAsString(deconstruction.packet);
                        var buffers = deconstruction.buffers;
                        buffers.unshift(pack);
                        callback(buffers)
                    }

                    binary.removeBlobs(obj, writeEncoding)
                }

                function Decoder() {
                    this.reconstructor = null
                }

                Emitter(Decoder.prototype);
                Decoder.prototype.add = function (obj) {
                    var packet;
                    if ("string" == typeof obj) {
                        packet = decodeString(obj);
                        if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) {
                            this.reconstructor = new BinaryReconstructor(packet);
                            if (this.reconstructor.reconPack.attachments === 0) {
                                this.emit("decoded", packet)
                            }
                        } else {
                            this.emit("decoded", packet)
                        }
                    } else if (isBuf(obj) || obj.base64) {
                        if (!this.reconstructor) {
                            throw new Error("got binary data when not reconstructing a packet")
                        } else {
                            packet = this.reconstructor.takeBinaryData(obj);
                            if (packet) {
                                this.reconstructor = null;
                                this.emit("decoded", packet)
                            }
                        }
                    } else {
                        throw new Error("Unknown type: " + obj)
                    }
                };
                function decodeString(str) {
                    var p = {};
                    var i = 0;
                    p.type = Number(str.charAt(0));
                    if (null == exports.types[p.type])return error();
                    if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
                        var buf = "";
                        while (str.charAt(++i) != "-") {
                            buf += str.charAt(i);
                            if (i == str.length)break
                        }
                        if (buf != Number(buf) || str.charAt(i) != "-") {
                            throw new Error("Illegal attachments")
                        }
                        p.attachments = Number(buf)
                    }
                    if ("/" == str.charAt(i + 1)) {
                        p.nsp = "";
                        while (++i) {
                            var c = str.charAt(i);
                            if ("," == c)break;
                            p.nsp += c;
                            if (i == str.length)break
                        }
                    } else {
                        p.nsp = "/"
                    }
                    var next = str.charAt(i + 1);
                    if ("" !== next && Number(next) == next) {
                        p.id = "";
                        while (++i) {
                            var c = str.charAt(i);
                            if (null == c || Number(c) != c) {
                                --i;
                                break
                            }
                            p.id += str.charAt(i);
                            if (i == str.length)break
                        }
                        p.id = Number(p.id)
                    }
                    if (str.charAt(++i)) {
                        try {
                            p.data = json.parse(str.substr(i))
                        } catch (e) {
                            return error()
                        }
                    }
                    debug("decoded %s as %j", str, p);
                    return p
                }

                Decoder.prototype.destroy = function () {
                    if (this.reconstructor) {
                        this.reconstructor.finishedReconstruction()
                    }
                };
                function BinaryReconstructor(packet) {
                    this.reconPack = packet;
                    this.buffers = []
                }

                BinaryReconstructor.prototype.takeBinaryData = function (binData) {
                    this.buffers.push(binData);
                    if (this.buffers.length == this.reconPack.attachments) {
                        var packet = binary.reconstructPacket(this.reconPack, this.buffers);
                        this.finishedReconstruction();
                        return packet
                    }
                    return null
                };
                BinaryReconstructor.prototype.finishedReconstruction = function () {
                    this.reconPack = null;
                    this.buffers = []
                };
                function error(data) {
                    return {type: exports.ERROR, data: "parser error"}
                }
            }, {"./binary": 46, "./is-buffer": 48, "component-emitter": 49, debug: 39, isarray: 43, json3: 50}],
            48: [function (_dereq_, module, exports) {
                (function (global) {
                    module.exports = isBuf;
                    function isBuf(obj) {
                        return global.Buffer && global.Buffer.isBuffer(obj) || global.ArrayBuffer && obj instanceof ArrayBuffer
                    }
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {}],
            49: [function (_dereq_, module, exports) {
                arguments[4][15][0].apply(exports, arguments)
            }, {dup: 15}],
            50: [function (_dereq_, module, exports) {
                (function (global) {
                    (function () {
                        var isLoader = typeof define === "function" && define.amd;
                        var objectTypes = {"function": true, object: true};
                        var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
                        var root = objectTypes[typeof window] && window || this, freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;
                        if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
                            root = freeGlobal
                        }
                        function runInContext(context, exports) {
                            context || (context = root["Object"]());
                            exports || (exports = root["Object"]());
                            var Number = context["Number"] || root["Number"], String = context["String"] || root["String"], Object = context["Object"] || root["Object"], Date = context["Date"] || root["Date"], SyntaxError = context["SyntaxError"] || root["SyntaxError"], TypeError = context["TypeError"] || root["TypeError"], Math = context["Math"] || root["Math"], nativeJSON = context["JSON"] || root["JSON"];
                            if (typeof nativeJSON == "object" && nativeJSON) {
                                exports.stringify = nativeJSON.stringify;
                                exports.parse = nativeJSON.parse
                            }
                            var objectProto = Object.prototype, getClass = objectProto.toString, isProperty, forEach, undef;
                            var isExtended = new Date(-0xc782b5b800cec);
                            try {
                                isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708
                            } catch (exception) {
                            }
                            function has(name) {
                                if (has[name] !== undef) {
                                    return has[name]
                                }
                                var isSupported;
                                if (name == "bug-string-char-index") {
                                    isSupported = "a"[0] != "a"
                                } else if (name == "json") {
                                    isSupported = has("json-stringify") && has("json-parse")
                                } else {
                                    var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
                                    if (name == "json-stringify") {
                                        var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
                                        if (stringifySupported) {
                                            (value = function () {
                                                return 1
                                            }).toJSON = value;
                                            try {
                                                stringifySupported = stringify(0) === "0" && stringify(new Number) === "0" && stringify(new String) == '""' && stringify(getClass) === undef && stringify(undef) === undef && stringify() === undef && stringify(value) === "1" && stringify([value]) == "[1]" && stringify([undef]) == "[null]" && stringify(null) == "null" && stringify([undef, getClass, null]) == "[null,null,null]" && stringify({a: [value, true, false, null, "\x00\b\n\f\r	"]}) == serialized && stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && stringify(new Date(-864e13)) == '"-271821-04-20T00:00:00.000Z"' && stringify(new Date(864e13)) == '"+275760-09-13T00:00:00.000Z"' && stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"'
                                            } catch (exception) {
                                                stringifySupported = false
                                            }
                                        }
                                        isSupported = stringifySupported
                                    }
                                    if (name == "json-parse") {
                                        var parse = exports.parse;
                                        if (typeof parse == "function") {
                                            try {
                                                if (parse("0") === 0 && !parse(false)) {
                                                    value = parse(serialized);
                                                    var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                                                    if (parseSupported) {
                                                        try {
                                                            parseSupported = !parse('"	"')
                                                        } catch (exception) {
                                                        }
                                                        if (parseSupported) {
                                                            try {
                                                                parseSupported = parse("01") !== 1
                                                            } catch (exception) {
                                                            }
                                                        }
                                                        if (parseSupported) {
                                                            try {
                                                                parseSupported = parse("1.") !== 1
                                                            } catch (exception) {
                                                            }
                                                        }
                                                    }
                                                }
                                            } catch (exception) {
                                                parseSupported = false
                                            }
                                        }
                                        isSupported = parseSupported
                                    }
                                }
                                return has[name] = !!isSupported
                            }

                            if (!has("json")) {
                                var functionClass = "[object Function]", dateClass = "[object Date]", numberClass = "[object Number]", stringClass = "[object String]", arrayClass = "[object Array]", booleanClass = "[object Boolean]";
                                var charIndexBuggy = has("bug-string-char-index");
                                if (!isExtended) {
                                    var floor = Math.floor;
                                    var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
                                    var getDay = function (year, month) {
                                        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400)
                                    }
                                }
                                if (!(isProperty = objectProto.hasOwnProperty)) {
                                    isProperty = function (property) {
                                        var members = {}, constructor;
                                        if ((members.__proto__ = null, members.__proto__ = {toString: 1}, members).toString != getClass) {
                                            isProperty = function (property) {
                                                var original = this.__proto__, result = property in (this.__proto__ = null, this);
                                                this.__proto__ = original;
                                                return result
                                            }
                                        } else {
                                            constructor = members.constructor;
                                            isProperty = function (property) {
                                                var parent = (this.constructor || constructor).prototype;
                                                return property in this && !(property in parent && this[property] === parent[property])
                                            }
                                        }
                                        members = null;
                                        return isProperty.call(this, property)
                                    }
                                }
                                forEach = function (object, callback) {
                                    var size = 0, Properties, members, property;
                                    (Properties = function () {
                                        this.valueOf = 0
                                    }).prototype.valueOf = 0;
                                    members = new Properties;
                                    for (property in members) {
                                        if (isProperty.call(members, property)) {
                                            size++
                                        }
                                    }
                                    Properties = members = null;
                                    if (!size) {
                                        members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
                                        forEach = function (object, callback) {
                                            var isFunction = getClass.call(object) == functionClass, property, length;
                                            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
                                            for (property in object) {
                                                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                                                    callback(property)
                                                }
                                            }
                                            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
                                        }
                                    } else if (size == 2) {
                                        forEach = function (object, callback) {
                                            var members = {}, isFunction = getClass.call(object) == functionClass, property;
                                            for (property in object) {
                                                if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                                                    callback(property)
                                                }
                                            }
                                        }
                                    } else {
                                        forEach = function (object, callback) {
                                            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
                                            for (property in object) {
                                                if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                                                    callback(property)
                                                }
                                            }
                                            if (isConstructor || isProperty.call(object, property = "constructor")) {
                                                callback(property)
                                            }
                                        }
                                    }
                                    return forEach(object, callback)
                                };
                                if (!has("json-stringify")) {
                                    var Escapes = {
                                        92: "\\\\",
                                        34: '\\"',
                                        8: "\\b",
                                        12: "\\f",
                                        10: "\\n",
                                        13: "\\r",
                                        9: "\\t"
                                    };
                                    var leadingZeroes = "000000";
                                    var toPaddedString = function (width, value) {
                                        return (leadingZeroes + (value || 0)).slice(-width)
                                    };
                                    var unicodePrefix = "\\u00";
                                    var quote = function (value) {
                                        var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
                                        var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
                                        for (; index < length; index++) {
                                            var charCode = value.charCodeAt(index);
                                            switch (charCode) {
                                                case 8:
                                                case 9:
                                                case 10:
                                                case 12:
                                                case 13:
                                                case 34:
                                                case 92:
                                                    result += Escapes[charCode];
                                                    break;
                                                default:
                                                    if (charCode < 32) {
                                                        result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                                                        break
                                                    }
                                                    result += useCharIndex ? symbols[index] : value.charAt(index)
                                            }
                                        }
                                        return result + '"'
                                    };
                                    var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
                                        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
                                        try {
                                            value = object[property]
                                        } catch (exception) {
                                        }
                                        if (typeof value == "object" && value) {
                                            className = getClass.call(value);
                                            if (className == dateClass && !isProperty.call(value, "toJSON")) {
                                                if (value > -1 / 0 && value < 1 / 0) {
                                                    if (getDay) {
                                                        date = floor(value / 864e5);
                                                        for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                                                        for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                                                        date = 1 + date - getDay(year, month);
                                                        time = (value % 864e5 + 864e5) % 864e5;
                                                        hours = floor(time / 36e5) % 24;
                                                        minutes = floor(time / 6e4) % 60;
                                                        seconds = floor(time / 1e3) % 60;
                                                        milliseconds = time % 1e3
                                                    } else {
                                                        year = value.getUTCFullYear();
                                                        month = value.getUTCMonth();
                                                        date = value.getUTCDate();
                                                        hours = value.getUTCHours();
                                                        minutes = value.getUTCMinutes();
                                                        seconds = value.getUTCSeconds();
                                                        milliseconds = value.getUTCMilliseconds()
                                                    }
                                                    value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + "." + toPaddedString(3, milliseconds) + "Z"
                                                } else {
                                                    value = null
                                                }
                                            } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, "toJSON"))) {
                                                value = value.toJSON(property)
                                            }
                                        }
                                        if (callback) {
                                            value = callback.call(object, property, value)
                                        }
                                        if (value === null) {
                                            return "null"
                                        }
                                        className = getClass.call(value);
                                        if (className == booleanClass) {
                                            return "" + value
                                        } else if (className == numberClass) {
                                            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null"
                                        } else if (className == stringClass) {
                                            return quote("" + value)
                                        }
                                        if (typeof value == "object") {
                                            for (length = stack.length; length--;) {
                                                if (stack[length] === value) {
                                                    throw TypeError()
                                                }
                                            }
                                            stack.push(value);
                                            results = [];
                                            prefix = indentation;
                                            indentation += whitespace;
                                            if (className == arrayClass) {
                                                for (index = 0, length = value.length; index < length; index++) {
                                                    element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                                                    results.push(element === undef ? "null" : element)
                                                }
                                                result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]"
                                            } else {
                                                forEach(properties || value, function (property) {
                                                    var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                                                    if (element !== undef) {
                                                        results.push(quote(property) + ":" + (whitespace ? " " : "") + element)
                                                    }
                                                });
                                                result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}"
                                            }
                                            stack.pop();
                                            return result
                                        }
                                    };
                                    exports.stringify = function (source, filter, width) {
                                        var whitespace, callback, properties, className;
                                        if (objectTypes[typeof filter] && filter) {
                                            if ((className = getClass.call(filter)) == functionClass) {
                                                callback = filter
                                            } else if (className == arrayClass) {
                                                properties = {};
                                                for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1));
                                            }
                                        }
                                        if (width) {
                                            if ((className = getClass.call(width)) == numberClass) {
                                                if ((width -= width % 1) > 0) {
                                                    for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
                                                }
                                            } else if (className == stringClass) {
                                                whitespace = width.length <= 10 ? width : width.slice(0, 10)
                                            }
                                        }
                                        return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", [])
                                    }
                                }
                                if (!has("json-parse")) {
                                    var fromCharCode = String.fromCharCode;
                                    var Unescapes = {
                                        92: "\\",
                                        34: '"',
                                        47: "/",
                                        98: "\b",
                                        116: "	",
                                        110: "\n",
                                        102: "\f",
                                        114: "\r"
                                    };
                                    var Index, Source;
                                    var abort = function () {
                                        Index = Source = null;
                                        throw SyntaxError()
                                    };
                                    var lex = function () {
                                        var source = Source, length = source.length, value, begin, position, isSigned, charCode;
                                        while (Index < length) {
                                            charCode = source.charCodeAt(Index);
                                            switch (charCode) {
                                                case 9:
                                                case 10:
                                                case 13:
                                                case 32:
                                                    Index++;
                                                    break;
                                                case 123:
                                                case 125:
                                                case 91:
                                                case 93:
                                                case 58:
                                                case 44:
                                                    value = charIndexBuggy ? source.charAt(Index) : source[Index];
                                                    Index++;
                                                    return value;
                                                case 34:
                                                    for (value = "@", Index++; Index < length;) {
                                                        charCode = source.charCodeAt(Index);
                                                        if (charCode < 32) {
                                                            abort()
                                                        } else if (charCode == 92) {
                                                            charCode = source.charCodeAt(++Index);
                                                            switch (charCode) {
                                                                case 92:
                                                                case 34:
                                                                case 47:
                                                                case 98:
                                                                case 116:
                                                                case 110:
                                                                case 102:
                                                                case 114:
                                                                    value += Unescapes[charCode];
                                                                    Index++;
                                                                    break;
                                                                case 117:
                                                                    begin = ++Index;
                                                                    for (position = Index + 4; Index < position; Index++) {
                                                                        charCode = source.charCodeAt(Index);
                                                                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                                                                            abort()
                                                                        }
                                                                    }
                                                                    value += fromCharCode("0x" + source.slice(begin, Index));
                                                                    break;
                                                                default:
                                                                    abort()
                                                            }
                                                        } else {
                                                            if (charCode == 34) {
                                                                break
                                                            }
                                                            charCode = source.charCodeAt(Index);
                                                            begin = Index;
                                                            while (charCode >= 32 && charCode != 92 && charCode != 34) {
                                                                charCode = source.charCodeAt(++Index)
                                                            }
                                                            value += source.slice(begin, Index)
                                                        }
                                                    }
                                                    if (source.charCodeAt(Index) == 34) {
                                                        Index++;
                                                        return value
                                                    }
                                                    abort();
                                                default:
                                                    begin = Index;
                                                    if (charCode == 45) {
                                                        isSigned = true;
                                                        charCode = source.charCodeAt(++Index)
                                                    }
                                                    if (charCode >= 48 && charCode <= 57) {
                                                        if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                                                            abort()
                                                        }
                                                        isSigned = false;
                                                        for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++);
                                                        if (source.charCodeAt(Index) == 46) {
                                                            position = ++Index;
                                                            for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);
                                                            if (position == Index) {
                                                                abort()
                                                            }
                                                            Index = position
                                                        }
                                                        charCode = source.charCodeAt(Index);
                                                        if (charCode == 101 || charCode == 69) {
                                                            charCode = source.charCodeAt(++Index);
                                                            if (charCode == 43 || charCode == 45) {
                                                                Index++
                                                            }
                                                            for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++);
                                                            if (position == Index) {
                                                                abort()
                                                            }
                                                            Index = position
                                                        }
                                                        return +source.slice(begin, Index)
                                                    }
                                                    if (isSigned) {
                                                        abort()
                                                    }
                                                    if (source.slice(Index, Index + 4) == "true") {
                                                        Index += 4;
                                                        return true
                                                    } else if (source.slice(Index, Index + 5) == "false") {
                                                        Index += 5;
                                                        return false
                                                    } else if (source.slice(Index, Index + 4) == "null") {
                                                        Index += 4;
                                                        return null
                                                    }
                                                    abort()
                                            }
                                        }
                                        return "$"
                                    };
                                    var get = function (value) {
                                        var results, hasMembers;
                                        if (value == "$") {
                                            abort()
                                        }
                                        if (typeof value == "string") {
                                            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                                                return value.slice(1)
                                            }
                                            if (value == "[") {
                                                results = [];
                                                for (; ; hasMembers || (hasMembers = true)) {
                                                    value = lex();
                                                    if (value == "]") {
                                                        break
                                                    }
                                                    if (hasMembers) {
                                                        if (value == ",") {
                                                            value = lex();
                                                            if (value == "]") {
                                                                abort()
                                                            }
                                                        } else {
                                                            abort()
                                                        }
                                                    }
                                                    if (value == ",") {
                                                        abort()
                                                    }
                                                    results.push(get(value))
                                                }
                                                return results
                                            } else if (value == "{") {
                                                results = {};
                                                for (; ; hasMembers || (hasMembers = true)) {
                                                    value = lex();
                                                    if (value == "}") {
                                                        break
                                                    }
                                                    if (hasMembers) {
                                                        if (value == ",") {
                                                            value = lex();
                                                            if (value == "}") {
                                                                abort()
                                                            }
                                                        } else {
                                                            abort()
                                                        }
                                                    }
                                                    if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                                                        abort()
                                                    }
                                                    results[value.slice(1)] = get(lex())
                                                }
                                                return results
                                            }
                                            abort()
                                        }
                                        return value
                                    };
                                    var update = function (source, property, callback) {
                                        var element = walk(source, property, callback);
                                        if (element === undef) {
                                            delete source[property]
                                        } else {
                                            source[property] = element
                                        }
                                    };
                                    var walk = function (source, property, callback) {
                                        var value = source[property], length;
                                        if (typeof value == "object" && value) {
                                            if (getClass.call(value) == arrayClass) {
                                                for (length = value.length; length--;) {
                                                    update(value, length, callback)
                                                }
                                            } else {
                                                forEach(value, function (property) {
                                                    update(value, property, callback)
                                                })
                                            }
                                        }
                                        return callback.call(source, property, value)
                                    };
                                    exports.parse = function (source, callback) {
                                        var result, value;
                                        Index = 0;
                                        Source = "" + source;
                                        result = get(lex());
                                        if (lex() != "$") {
                                            abort()
                                        }
                                        Index = Source = null;
                                        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result
                                    }
                                }
                            }
                            exports["runInContext"] = runInContext;
                            return exports
                        }

                        if (freeExports && !isLoader) {
                            runInContext(root, freeExports)
                        } else {
                            var nativeJSON = root.JSON, previousJSON = root["JSON3"], isRestored = false;
                            var JSON3 = runInContext(root, root["JSON3"] = {
                                noConflict: function () {
                                    if (!isRestored) {
                                        isRestored = true;
                                        root.JSON = nativeJSON;
                                        root["JSON3"] = previousJSON;
                                        nativeJSON = previousJSON = null
                                    }
                                    return JSON3
                                }
                            });
                            root.JSON = {parse: JSON3.parse, stringify: JSON3.stringify}
                        }
                        if (isLoader) {
                            define(function () {
                                return JSON3
                            })
                        }
                    }).call(this)
                }).call(this, typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {})
            }, {}],
            51: [function (_dereq_, module, exports) {
                module.exports = toArray;
                function toArray(list, index) {
                    var array = [];
                    index = index || 0;
                    for (var i = index || 0; i < list.length; i++) {
                        array[i - index] = list[i]
                    }
                    return array
                }
            }, {}]
        }, {}, [31])(31)
    });
</script>
<script src="/static/view/panel.js"></script>
</body>
</html>